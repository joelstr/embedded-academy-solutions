
ElectronicsLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800653c  0800653c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800653c  0800653c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800653c  0800653c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  20000074  080065b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ac8  080065b8  00021ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccc3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033cd  00000000  00000000  0003cd67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  00040138  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001280  00000000  00000000  00041510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001df53  00000000  00000000  00042790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013460  00000000  00000000  000606e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b014b  00000000  00000000  00073b43  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123c8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005544  00000000  00000000  00123d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006430 	.word	0x08006430

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006430 	.word	0x08006430

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <BlinkLed>:

static uint32_t ticks = 0;
static int32_t ToggleLed();

void BlinkLed()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	if(ToggleLed())
 8000284:	f000 f80c 	bl	80002a0 <ToggleLed>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d004      	beq.n	8000298 <BlinkLed+0x18>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800028e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <BlinkLed+0x1c>)
 8000294:	f000 fe1c 	bl	8000ed0 <HAL_GPIO_TogglePin>
	}
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	48000400 	.word	0x48000400

080002a0 <ToggleLed>:


static int32_t ToggleLed()
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
    int32_t toggle = 0; // Set to non-zero if we should toggle the led
 80002a6:	2300      	movs	r3, #0
 80002a8:	607b      	str	r3, [r7, #4]

	asm(
 80002aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <.end+0x14>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4619      	mov	r1, r3
 80002b4:	f101 0301 	add.w	r3, r1, #1
 80002b8:	4293      	cmp	r3, r2
 80002ba:	dd04      	ble.n	80002c6 <.jump>
 80002bc:	f04f 0201 	mov.w	r2, #1
 80002c0:	f04f 0300 	mov.w	r3, #0
 80002c4:	e002      	b.n	80002cc <.end>

080002c6 <.jump>:
 80002c6:	461b      	mov	r3, r3
 80002c8:	f04f 0200 	mov.w	r2, #0

080002cc <.end>:
 80002cc:	4904      	ldr	r1, [pc, #16]	; (80002e0 <.end+0x14>)
 80002ce:	600b      	str	r3, [r1, #0]
 80002d0:	607a      	str	r2, [r7, #4]
		: [ticks] "+r" (ticks),
		  [toggle] "=r" (toggle)
		: [TOGGLE_TIME] "r" (TOGGLE_TIME)
	);

    return toggle;
 80002d2:	687b      	ldr	r3, [r7, #4]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	20000090 	.word	0x20000090

080002e4 <ButtonToggle>:
#define ON_THRESHOLD 2000 // [mV]
#define HIGH_ERROR_LIMIT 3000 // [mV]
#define ADREF 3300 // [mV]

void ButtonToggle()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	if (AdcHigh())
 80002e8:	f000 f814 	bl	8000314 <AdcHigh>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d006      	beq.n	8000300 <ButtonToggle+0x1c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80002f2:	2201      	movs	r2, #1
 80002f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f8:	4805      	ldr	r0, [pc, #20]	; (8000310 <ButtonToggle+0x2c>)
 80002fa:	f000 fdd1 	bl	8000ea0 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 80002fe:	e005      	b.n	800030c <ButtonToggle+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000306:	4802      	ldr	r0, [pc, #8]	; (8000310 <ButtonToggle+0x2c>)
 8000308:	f000 fdca 	bl	8000ea0 <HAL_GPIO_WritePin>
}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	48000400 	.word	0x48000400

08000314 <AdcHigh>:

static int16_t AdcHigh()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
	char msg[10];
	int16_t rawValue = 0;
 800031a:	2300      	movs	r3, #0
 800031c:	81fb      	strh	r3, [r7, #14]
	int16_t mV = 0;
 800031e:	2300      	movs	r3, #0
 8000320:	81bb      	strh	r3, [r7, #12]

	ADC1->CR |= ADC_CR_ADSTART;
 8000322:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800032c:	f043 0304 	orr.w	r3, r3, #4
 8000330:	6093      	str	r3, [r2, #8]
	rawValue = ADC1->DR;
 8000332:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000338:	81fb      	strh	r3, [r7, #14]

	mV = ADREF * rawValue >> 12;
 800033a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800033e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8000342:	fb02 f303 	mul.w	r3, r2, r3
 8000346:	131b      	asrs	r3, r3, #12
 8000348:	81bb      	strh	r3, [r7, #12]

	// Convert to string and print
	sprintf(msg, "%d\r\n", mV);
 800034a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800034e:	463b      	mov	r3, r7
 8000350:	4910      	ldr	r1, [pc, #64]	; (8000394 <AdcHigh+0x80>)
 8000352:	4618      	mov	r0, r3
 8000354:	f005 fc70 	bl	8005c38 <siprintf>
	UartPrint(msg, strlen(msg));
 8000358:	463b      	mov	r3, r7
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff38 	bl	80001d0 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	b29a      	uxth	r2, r3
 8000364:	463b      	mov	r3, r7
 8000366:	4611      	mov	r1, r2
 8000368:	4618      	mov	r0, r3
 800036a:	f000 fad1 	bl	8000910 <UartPrint>

	return ((mV > ON_THRESHOLD) && (mV < HIGH_ERROR_LIMIT));
 800036e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000372:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000376:	dd07      	ble.n	8000388 <AdcHigh+0x74>
 8000378:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800037c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000380:	4293      	cmp	r3, r2
 8000382:	dc01      	bgt.n	8000388 <AdcHigh+0x74>
 8000384:	2301      	movs	r3, #1
 8000386:	e000      	b.n	800038a <AdcHigh+0x76>
 8000388:	2300      	movs	r3, #0
 800038a:	b21b      	sxth	r3, r3
}
 800038c:	4618      	mov	r0, r3
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	08006448 	.word	0x08006448

08000398 <AdcInit>:

void AdcInit()
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 800039e:	4b22      	ldr	r3, [pc, #136]	; (8000428 <AdcInit+0x90>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a21      	ldr	r2, [pc, #132]	; (8000428 <AdcInit+0x90>)
 80003a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <AdcInit+0x90>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b2:	607b      	str	r3, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]

	ADC1->CR &= (ADC_CR_ADVREGEN_1);
 80003b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003c4:	6093      	str	r3, [r2, #8]
	ADC1->CR &= (~ADC_CR_ADVREGEN);
 80003c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003d0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80003d4:	6093      	str	r3, [r2, #8]
	ADC1->CR |= ADC_CR_ADVREGEN_0;
 80003d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e4:	6093      	str	r3, [r2, #8]
	osDelay(1);
 80003e6:	2001      	movs	r0, #1
 80003e8:	f002 fff4 	bl	80033d4 <osDelay>

	ADC1->SQR1 = (ADC1->SQR1 & (~((((0x1FUL << (0U))) << (6U))))) | ((1U << (6U)));
 80003ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	f423 63f8 	bic.w	r3, r3, #1984	; 0x7c0
 80003f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80003fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->CR |= (ADC_CR_ADEN);
 8000400:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6093      	str	r3, [r2, #8]
	while (!(ADC1->ISR & ADC_ISR_ADRDY))
 8000410:	bf00      	nop
 8000412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0f8      	beq.n	8000412 <AdcInit+0x7a>
	{

	}
}
 8000420:	bf00      	nop
 8000422:	3708      	adds	r7, #8
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40021000 	.word	0x40021000

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000430:	f000 faac 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000434:	f000 f826 	bl	8000484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000438:	f000 f87c 	bl	8000534 <MX_GPIO_Init>
//  MX_USART2_UART_Init();
  UartInit();
 800043c:	f000 fa38 	bl	80008b0 <UartInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000440:	f002 feb6 	bl	80031b0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ButtonFunction */
  ButtonFunctionHandle = osThreadNew(StartButtonFunction, NULL, &ButtonFunction_attributes);
 8000444:	4a09      	ldr	r2, [pc, #36]	; (800046c <main+0x40>)
 8000446:	2100      	movs	r1, #0
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <main+0x44>)
 800044a:	f002 ff19 	bl	8003280 <osThreadNew>
 800044e:	4602      	mov	r2, r0
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <main+0x48>)
 8000452:	601a      	str	r2, [r3, #0]

  /* creation of BlinkFunction */
  BlinkFunctionHandle = osThreadNew(StartBlinkFunction, NULL, &BlinkFunction_attributes);
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <main+0x4c>)
 8000456:	2100      	movs	r1, #0
 8000458:	4808      	ldr	r0, [pc, #32]	; (800047c <main+0x50>)
 800045a:	f002 ff11 	bl	8003280 <osThreadNew>
 800045e:	4602      	mov	r2, r0
 8000460:	4b07      	ldr	r3, [pc, #28]	; (8000480 <main+0x54>)
 8000462:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000464:	f002 fed8 	bl	8003218 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000468:	e7fe      	b.n	8000468 <main+0x3c>
 800046a:	bf00      	nop
 800046c:	08006488 	.word	0x08006488
 8000470:	08000605 	.word	0x08000605
 8000474:	20001a30 	.word	0x20001a30
 8000478:	080064ac 	.word	0x080064ac
 800047c:	0800061d 	.word	0x0800061d
 8000480:	200019a8 	.word	0x200019a8

08000484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b09c      	sub	sp, #112	; 0x70
 8000488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800048a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800048e:	2228      	movs	r2, #40	; 0x28
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f005 fbc7 	bl	8005c26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000498:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
 80004a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f005 fbb9 	bl	8005c26 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b4:	2302      	movs	r3, #2
 80004b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	2301      	movs	r3, #1
 80004ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004bc:	2310      	movs	r3, #16
 80004be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c0:	2302      	movs	r3, #2
 80004c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004c4:	2300      	movs	r3, #0
 80004c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004c8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fd16 	bl	8000f04 <HAL_RCC_OscConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80004de:	f000 f8b9 	bl	8000654 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e2:	230f      	movs	r3, #15
 80004e4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004e6:	2302      	movs	r3, #2
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004fc:	2102      	movs	r1, #2
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fc08 	bl	8001d14 <HAL_RCC_ClockConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800050a:	f000 f8a3 	bl	8000654 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 800050e:	2380      	movs	r3, #128	; 0x80
 8000510:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000516:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000518:	463b      	mov	r3, r7
 800051a:	4618      	mov	r0, r3
 800051c:	f001 fe62 	bl	80021e4 <HAL_RCCEx_PeriphCLKConfig>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000526:	f000 f895 	bl	8000654 <Error_Handler>
  }
}
 800052a:	bf00      	nop
 800052c:	3770      	adds	r7, #112	; 0x70
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
	...

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b08a      	sub	sp, #40	; 0x28
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	f107 0314 	add.w	r3, r7, #20
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000554:	6153      	str	r3, [r2, #20]
 8000556:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000562:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a24      	ldr	r2, [pc, #144]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000568:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800056c:	6153      	str	r3, [r2, #20]
 800056e:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <MX_GPIO_Init+0xc4>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000584:	6153      	str	r3, [r2, #20]
 8000586:	4b1c      	ldr	r3, [pc, #112]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <MX_GPIO_Init+0xc4>)
 8000598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <MX_GPIO_Init+0xc4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005b0:	4812      	ldr	r0, [pc, #72]	; (80005fc <MX_GPIO_Init+0xc8>)
 80005b2:	f000 fc75 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005bc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <MX_GPIO_Init+0xcc>)
 80005ce:	f000 faf5 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_GPIO_Init+0xc8>)
 80005ec:	f000 fae6 	bl	8000bbc <HAL_GPIO_Init>

}
 80005f0:	bf00      	nop
 80005f2:	3728      	adds	r7, #40	; 0x28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	48000400 	.word	0x48000400
 8000600:	48000800 	.word	0x48000800

08000604 <StartButtonFunction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonFunction */
void StartButtonFunction(void *argument)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  AdcInit();
 800060c:	f7ff fec4 	bl	8000398 <AdcInit>
  for(;;)
  {
    ButtonToggle(); // Toggle led state on button press
 8000610:	f7ff fe68 	bl	80002e4 <ButtonToggle>
    osDelay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f002 fedd 	bl	80033d4 <osDelay>
    ButtonToggle(); // Toggle led state on button press
 800061a:	e7f9      	b.n	8000610 <StartButtonFunction+0xc>

0800061c <StartBlinkFunction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkFunction */
void StartBlinkFunction(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkFunction */
  /* Infinite loop */
  for(;;)
  {
	BlinkLed(); // Toggle led state every 10 seconds
 8000624:	f7ff fe2c 	bl	8000280 <BlinkLed>
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 fed3 	bl	80033d4 <osDelay>
	BlinkLed(); // Toggle led state every 10 seconds
 800062e:	e7f9      	b.n	8000624 <StartBlinkFunction+0x8>

08000630 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d101      	bne.n	8000646 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000642:	f000 f9b9 	bl	80009b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40001000 	.word	0x40001000

08000654 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000658:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065a:	e7fe      	b.n	800065a <Error_Handler+0x6>

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_MspInit+0x4c>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_MspInit+0x4c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_MspInit+0x4c>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <HAL_MspInit+0x4c>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a0a      	ldr	r2, [pc, #40]	; (80006a8 <HAL_MspInit+0x4c>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_MspInit+0x4c>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	210f      	movs	r1, #15
 8000696:	f06f 0001 	mvn.w	r0, #1
 800069a:	f000 fa65 	bl	8000b68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <HAL_UART_MspInit+0x7c>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d128      	bne.n	8000720 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <HAL_UART_MspInit+0x80>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <HAL_UART_MspInit+0x80>)
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b14      	ldr	r3, [pc, #80]	; (800072c <HAL_UART_MspInit+0x80>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_UART_MspInit+0x80>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <HAL_UART_MspInit+0x80>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_UART_MspInit+0x80>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006fe:	230c      	movs	r3, #12
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800070e:	2307      	movs	r3, #7
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4619      	mov	r1, r3
 8000718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071c:	f000 fa4e 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000720:	bf00      	nop
 8000722:	3728      	adds	r7, #40	; 0x28
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40004400 	.word	0x40004400
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08c      	sub	sp, #48	; 0x30
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000740:	2200      	movs	r2, #0
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	2036      	movs	r0, #54	; 0x36
 8000746:	f000 fa0f 	bl	8000b68 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800074a:	2036      	movs	r0, #54	; 0x36
 800074c:	f000 fa28 	bl	8000ba0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_InitTick+0xa0>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	4a1e      	ldr	r2, [pc, #120]	; (80007d0 <HAL_InitTick+0xa0>)
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	61d3      	str	r3, [r2, #28]
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <HAL_InitTick+0xa0>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	f003 0310 	and.w	r3, r3, #16
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000768:	f107 0210 	add.w	r2, r7, #16
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f001 fd04 	bl	8002180 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000778:	f001 fcbe 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 800077c:	4603      	mov	r3, r0
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <HAL_InitTick+0xa4>)
 8000786:	fba2 2303 	umull	r2, r3, r2, r3
 800078a:	0c9b      	lsrs	r3, r3, #18
 800078c:	3b01      	subs	r3, #1
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_InitTick+0xa8>)
 8000792:	4a12      	ldr	r2, [pc, #72]	; (80007dc <HAL_InitTick+0xac>)
 8000794:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_InitTick+0xa8>)
 8000798:	f240 32e7 	movw	r2, #999	; 0x3e7
 800079c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_InitTick+0xa8>)
 80007a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_InitTick+0xa8>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <HAL_InitTick+0xa8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <HAL_InitTick+0xa8>)
 80007b2:	f001 fea9 	bl	8002508 <HAL_TIM_Base_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d104      	bne.n	80007c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <HAL_InitTick+0xa8>)
 80007be:	f001 ff05 	bl	80025cc <HAL_TIM_Base_Start_IT>
 80007c2:	4603      	mov	r3, r0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3730      	adds	r7, #48	; 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	431bde83 	.word	0x431bde83
 80007d8:	20001a34 	.word	0x20001a34
 80007dc:	40001000 	.word	0x40001000

080007e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <NMI_Handler+0x4>

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler+0x4>

080007f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler+0x4>

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <TIM6_DAC_IRQHandler+0x10>)
 8000812:	f001 ff2f 	bl	8002674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20001a34 	.word	0x20001a34

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f005 f9b4 	bl	8005bbc <__errno>
 8000854:	4602      	mov	r2, r0
 8000856:	230c      	movs	r3, #12
 8000858:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20004000 	.word	0x20004000
 8000880:	00000400 	.word	0x00000400
 8000884:	20000094 	.word	0x20000094
 8000888:	20001ac8 	.word	0x20001ac8

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <SystemInit+0x20>)
 8000892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000896:	4a05      	ldr	r2, [pc, #20]	; (80008ac <SystemInit+0x20>)
 8000898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800089c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000ed00 	.word	0xe000ed00

080008b0 <UartInit>:
#include "cmsis_os.h"

UART_HandleTypeDef huart2;

void UartInit()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <UartInit+0x58>)
 80008b6:	4a15      	ldr	r2, [pc, #84]	; (800090c <UartInit+0x5c>)
 80008b8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <UartInit+0x58>)
 80008bc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80008c0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <UartInit+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <UartInit+0x58>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <UartInit+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <UartInit+0x58>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b0b      	ldr	r3, [pc, #44]	; (8000908 <UartInit+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <UartInit+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <UartInit+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <UartInit+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <UartInit+0x58>)
 80008f4:	f002 f892 	bl	8002a1c <HAL_UART_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <UartInit+0x52>
 80008fe:	b672      	cpsid	i
	{
		__disable_irq();
		while(1)
 8000900:	e7fe      	b.n	8000900 <UartInit+0x50>
		{
			// Error
		}
	}
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200019ac 	.word	0x200019ac
 800090c:	40004400 	.word	0x40004400

08000910 <UartPrint>:

void UartPrint(char *msg, uint16_t size)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, size, HAL_MAX_DELAY);
 800091c:	887a      	ldrh	r2, [r7, #2]
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	6879      	ldr	r1, [r7, #4]
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <UartPrint+0x24>)
 8000926:	f002 f8c7 	bl	8002ab8 <HAL_UART_Transmit>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200019ac 	.word	0x200019ac

08000938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000970 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 800093e:	490e      	ldr	r1, [pc, #56]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000940:	4a0e      	ldr	r2, [pc, #56]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0b      	ldr	r2, [pc, #44]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000954:	4c0b      	ldr	r4, [pc, #44]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000962:	f7ff ff93 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000966:	f005 f92f 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096a:	f7ff fd5f 	bl	800042c <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000970:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800097c:	08006544 	.word	0x08006544
  ldr r2, =_sbss
 8000980:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000984:	20001ac8 	.word	0x20001ac8

08000988 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_IRQHandler>
	...

0800098c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x28>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x28>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f8d8 	bl	8000b52 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff fec4 	bl	8000730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fe58 	bl	800065c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20001a80 	.word	0x20001a80

080009e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20001a80 	.word	0x20001a80

080009f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <__NVIC_EnableIRQ+0x38>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff4c 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7a:	f7ff ff61 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f7ff ffb1 	bl	8000aec <NVIC_EncodePriority>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff80 	bl	8000a98 <__NVIC_SetPriority>
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff54 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e14e      	b.n	8000e6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8140 	beq.w	8000e64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 0201 	and.w	r2, r3, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	6939      	ldr	r1, [r7, #16]
 8000cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0203 	and.w	r2, r3, #3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 809a 	beq.w	8000e64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a54      	ldr	r2, [pc, #336]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a50      	ldr	r2, [pc, #320]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x1e0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1dc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <HAL_GPIO_Init+0x2d8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1d8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a44      	ldr	r2, [pc, #272]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1d4>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e006      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e004      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e002      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	f002 0203 	and.w	r2, r2, #3
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	4093      	lsls	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dae:	4937      	ldr	r1, [pc, #220]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e0a:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f47f aea9 	bne.w	8000bcc <HAL_GPIO_Init+0x10>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	371c      	adds	r7, #28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	041a      	lsls	r2, r3, #16
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43d9      	mvns	r1, r3
 8000eee:	887b      	ldrh	r3, [r7, #2]
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d102      	bne.n	8000f1e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f000 bef4 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f000 816a 	beq.w	8001202 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2e:	4bb3      	ldr	r3, [pc, #716]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d00c      	beq.n	8000f54 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3a:	4bb0      	ldr	r3, [pc, #704]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 030c 	and.w	r3, r3, #12
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d159      	bne.n	8000ffa <HAL_RCC_OscConfig+0xf6>
 8000f46:	4bad      	ldr	r3, [pc, #692]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d152      	bne.n	8000ffa <HAL_RCC_OscConfig+0xf6>
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f68:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x82>
 8000f80:	4b9e      	ldr	r3, [pc, #632]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e015      	b.n	8000fb2 <HAL_RCC_OscConfig+0xae>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000fa2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000fae:	4b93      	ldr	r3, [pc, #588]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000fba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fc6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 810c 	beq.w	8001200 <HAL_RCC_OscConfig+0x2fc>
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8106 	bne.w	8001200 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	f000 be86 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	d106      	bne.n	8001014 <HAL_RCC_OscConfig+0x110>
 8001006:	4b7d      	ldr	r3, [pc, #500]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a7c      	ldr	r2, [pc, #496]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e030      	b.n	8001076 <HAL_RCC_OscConfig+0x172>
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10c      	bne.n	8001038 <HAL_RCC_OscConfig+0x134>
 800101e:	4b77      	ldr	r3, [pc, #476]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a76      	ldr	r2, [pc, #472]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	4b74      	ldr	r3, [pc, #464]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a73      	ldr	r2, [pc, #460]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	e01e      	b.n	8001076 <HAL_RCC_OscConfig+0x172>
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001042:	d10c      	bne.n	800105e <HAL_RCC_OscConfig+0x15a>
 8001044:	4b6d      	ldr	r3, [pc, #436]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a6c      	ldr	r2, [pc, #432]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 800104a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104e:	6013      	str	r3, [r2, #0]
 8001050:	4b6a      	ldr	r3, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a69      	ldr	r2, [pc, #420]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	e00b      	b.n	8001076 <HAL_RCC_OscConfig+0x172>
 800105e:	4b67      	ldr	r3, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a66      	ldr	r2, [pc, #408]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	4b64      	ldr	r3, [pc, #400]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a63      	ldr	r2, [pc, #396]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001070:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001074:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001076:	4b61      	ldr	r3, [pc, #388]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	f023 020f 	bic.w	r2, r3, #15
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	495d      	ldr	r1, [pc, #372]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001086:	4313      	orrs	r3, r2
 8001088:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d059      	beq.n	8001148 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fca4 	bl	80009e0 <HAL_GetTick>
 8001098:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109c:	e00a      	b.n	80010b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800109e:	f7ff fc9f 	bl	80009e0 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d902      	bls.n	80010b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	f000 be29 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>
 80010b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010c0:	fa93 f3a3 	rbit	r3, r3
 80010c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010cc:	fab3 f383 	clz	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d102      	bne.n	80010e6 <HAL_RCC_OscConfig+0x1e2>
 80010e0:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x20e>
 80010e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001102:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001116:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800111a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800111e:	fa92 f2a2 	rbit	r2, r2
 8001122:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001126:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800112a:	fab2 f282 	clz	r2, r2
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	f042 0220 	orr.w	r2, r2, #32
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	f002 021f 	and.w	r2, r2, #31
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	4013      	ands	r3, r2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0ab      	beq.n	800109e <HAL_RCC_OscConfig+0x19a>
 8001146:	e05c      	b.n	8001202 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001148:	f7ff fc4a 	bl	80009e0 <HAL_GetTick>
 800114c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001150:	e00a      	b.n	8001168 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001152:	f7ff fc45 	bl	80009e0 <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d902      	bls.n	8001168 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	f000 bdcf 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>
 8001168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800117c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	095b      	lsrs	r3, r3, #5
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d102      	bne.n	800119a <HAL_RCC_OscConfig+0x296>
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	e015      	b.n	80011c6 <HAL_RCC_OscConfig+0x2c2>
 800119a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011ba:	fa93 f3a3 	rbit	r3, r3
 80011be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <HAL_RCC_OscConfig+0x2f8>)
 80011c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011de:	fab2 f282 	clz	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f042 0220 	orr.w	r2, r2, #32
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	f002 021f 	and.w	r2, r2, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ab      	bne.n	8001152 <HAL_RCC_OscConfig+0x24e>
 80011fa:	e002      	b.n	8001202 <HAL_RCC_OscConfig+0x2fe>
 80011fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	1d3b      	adds	r3, r7, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 816f 	beq.w	80014f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001212:	4bd0      	ldr	r3, [pc, #832]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00b      	beq.n	8001236 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800121e:	4bcd      	ldr	r3, [pc, #820]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b08      	cmp	r3, #8
 8001228:	d16c      	bne.n	8001304 <HAL_RCC_OscConfig+0x400>
 800122a:	4bca      	ldr	r3, [pc, #808]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d166      	bne.n	8001304 <HAL_RCC_OscConfig+0x400>
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800123c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001240:	fa93 f3a3 	rbit	r3, r3
 8001244:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001248:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124c:	fab3 f383 	clz	r3, r3
 8001250:	b2db      	uxtb	r3, r3
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b01      	cmp	r3, #1
 800125e:	d102      	bne.n	8001266 <HAL_RCC_OscConfig+0x362>
 8001260:	4bbc      	ldr	r3, [pc, #752]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	e013      	b.n	800128e <HAL_RCC_OscConfig+0x38a>
 8001266:	2302      	movs	r3, #2
 8001268:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001270:	fa93 f3a3 	rbit	r3, r3
 8001274:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800127e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800128a:	4bb2      	ldr	r3, [pc, #712]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	2202      	movs	r2, #2
 8001290:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001294:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001298:	fa92 f2a2 	rbit	r2, r2
 800129c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012a4:	fab2 f282 	clz	r2, r2
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	f002 021f 	and.w	r2, r2, #31
 80012b4:	2101      	movs	r1, #1
 80012b6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d007      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3cc>
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	691b      	ldr	r3, [r3, #16]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d002      	beq.n	80012d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	f000 bd1b 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4ba0      	ldr	r3, [pc, #640]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	21f8      	movs	r1, #248	; 0xf8
 80012e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012e8:	fa91 f1a1 	rbit	r1, r1
 80012ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012f4:	fab1 f181 	clz	r1, r1
 80012f8:	b2c9      	uxtb	r1, r1
 80012fa:	408b      	lsls	r3, r1
 80012fc:	4995      	ldr	r1, [pc, #596]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	e0f5      	b.n	80014f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 8085 	beq.w	800141a <HAL_RCC_OscConfig+0x516>
 8001310:	2301      	movs	r3, #1
 8001312:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001316:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800131a:	fa93 f3a3 	rbit	r3, r3
 800131e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001322:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001326:	fab3 f383 	clz	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001330:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	461a      	mov	r2, r3
 8001338:	2301      	movs	r3, #1
 800133a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fb50 	bl	80009e0 <HAL_GetTick>
 8001340:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fb4b 	bl	80009e0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d902      	bls.n	800135c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	f000 bcd5 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800136e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x488>
 8001386:	4b73      	ldr	r3, [pc, #460]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	e013      	b.n	80013b4 <HAL_RCC_OscConfig+0x4b0>
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001392:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001396:	fa93 f3a3 	rbit	r3, r3
 800139a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800139e:	2302      	movs	r3, #2
 80013a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013a8:	fa93 f3a3 	rbit	r3, r3
 80013ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	2202      	movs	r2, #2
 80013b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013be:	fa92 f2a2 	rbit	r2, r2
 80013c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013ca:	fab2 f282 	clz	r2, r2
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f002 021f 	and.w	r2, r2, #31
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0af      	beq.n	8001346 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	21f8      	movs	r1, #248	; 0xf8
 80013f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013fe:	fa91 f1a1 	rbit	r1, r1
 8001402:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001406:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800140a:	fab1 f181 	clz	r1, r1
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	408b      	lsls	r3, r1
 8001412:	4950      	ldr	r1, [pc, #320]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]
 8001418:	e06a      	b.n	80014f0 <HAL_RCC_OscConfig+0x5ec>
 800141a:	2301      	movs	r3, #1
 800141c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001424:	fa93 f3a3 	rbit	r3, r3
 8001428:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800142c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001430:	fab3 f383 	clz	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800143a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	461a      	mov	r2, r3
 8001442:	2300      	movs	r3, #0
 8001444:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff facb 	bl	80009e0 <HAL_GetTick>
 800144a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fac6 	bl	80009e0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d902      	bls.n	8001466 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	f000 bc50 	b.w	8001d06 <HAL_RCC_OscConfig+0xe02>
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001470:	fa93 f3a3 	rbit	r3, r3
 8001474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147c:	fab3 f383 	clz	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d102      	bne.n	8001496 <HAL_RCC_OscConfig+0x592>
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	e013      	b.n	80014be <HAL_RCC_OscConfig+0x5ba>
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800149c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014a0:	fa93 f3a3 	rbit	r3, r3
 80014a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014a8:	2302      	movs	r3, #2
 80014aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <HAL_RCC_OscConfig+0x650>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	2202      	movs	r2, #2
 80014c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014c8:	fa92 f2a2 	rbit	r2, r2
 80014cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014d4:	fab2 f282 	clz	r2, r2
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	f042 0220 	orr.w	r2, r2, #32
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	f002 021f 	and.w	r2, r2, #31
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1af      	bne.n	8001450 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 80da 	beq.w	80016b4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d069      	beq.n	80015de <HAL_RCC_OscConfig+0x6da>
 800150a:	2301      	movs	r3, #1
 800150c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001510:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001514:	fa93 f3a3 	rbit	r3, r3
 8001518:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800151c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <HAL_RCC_OscConfig+0x654>)
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	461a      	mov	r2, r3
 8001530:	2301      	movs	r3, #1
 8001532:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001534:	f7ff fa54 	bl	80009e0 <HAL_GetTick>
 8001538:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153c:	e00e      	b.n	800155c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff fa4f 	bl	80009e0 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d906      	bls.n	800155c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e3d9      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	10908120 	.word	0x10908120
 800155c:	2302      	movs	r3, #2
 800155e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001562:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001566:	fa93 f3a3 	rbit	r3, r3
 800156a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800156e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	fa93 f2a3 	rbit	r2, r3
 8001580:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800158a:	2202      	movs	r2, #2
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	fa93 f2a3 	rbit	r2, r3
 8001598:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800159c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159e:	4ba5      	ldr	r3, [pc, #660]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80015a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015a6:	2102      	movs	r1, #2
 80015a8:	6019      	str	r1, [r3, #0]
 80015aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	fa93 f1a3 	rbit	r1, r3
 80015b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015b8:	6019      	str	r1, [r3, #0]
  return result;
 80015ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	fab3 f383 	clz	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0b0      	beq.n	800153e <HAL_RCC_OscConfig+0x63a>
 80015dc:	e06a      	b.n	80016b4 <HAL_RCC_OscConfig+0x7b0>
 80015de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	fa93 f2a3 	rbit	r2, r3
 80015f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015f4:	601a      	str	r2, [r3, #0]
  return result;
 80015f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x934>)
 8001606:	4413      	add	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	461a      	mov	r2, r3
 800160c:	2300      	movs	r3, #0
 800160e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff f9e6 	bl	80009e0 <HAL_GetTick>
 8001614:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001618:	e009      	b.n	800162e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800161a:	f7ff f9e1 	bl	80009e0 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e36b      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 800162e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001632:	2202      	movs	r2, #2
 8001634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	fa93 f2a3 	rbit	r2, r3
 8001640:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800164a:	2202      	movs	r2, #2
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	fa93 f2a3 	rbit	r2, r3
 8001658:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001662:	2202      	movs	r2, #2
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	fa93 f2a3 	rbit	r2, r3
 8001670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001674:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001676:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800167e:	2102      	movs	r1, #2
 8001680:	6019      	str	r1, [r3, #0]
 8001682:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	fa93 f1a3 	rbit	r1, r3
 800168c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001690:	6019      	str	r1, [r3, #0]
  return result;
 8001692:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	fab3 f383 	clz	r3, r3
 800169c:	b2db      	uxtb	r3, r3
 800169e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1b2      	bne.n	800161a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 8158 	beq.w	8001974 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ca:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d112      	bne.n	80016fc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	4b57      	ldr	r3, [pc, #348]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a56      	ldr	r2, [pc, #344]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80016dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e0:	61d3      	str	r3, [r2, #28]
 80016e2:	4b54      	ldr	r3, [pc, #336]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_RCC_OscConfig+0x938>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d11a      	bne.n	800173e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001708:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x938>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a4b      	ldr	r2, [pc, #300]	; (800183c <HAL_RCC_OscConfig+0x938>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001714:	f7ff f964 	bl	80009e0 <HAL_GetTick>
 8001718:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	e009      	b.n	8001732 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171e:	f7ff f95f 	bl	80009e0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e2e9      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	4b42      	ldr	r3, [pc, #264]	; (800183c <HAL_RCC_OscConfig+0x938>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0ef      	beq.n	800171e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x852>
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a39      	ldr	r2, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e02f      	b.n	80017b6 <HAL_RCC_OscConfig+0x8b2>
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0x876>
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a33      	ldr	r2, [pc, #204]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a30      	ldr	r2, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e01d      	b.n	80017b6 <HAL_RCC_OscConfig+0x8b2>
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d10c      	bne.n	800179e <HAL_RCC_OscConfig+0x89a>
 8001784:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6213      	str	r3, [r2, #32]
 800179c:	e00b      	b.n	80017b6 <HAL_RCC_OscConfig+0x8b2>
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6213      	str	r3, [r2, #32]
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a21      	ldr	r2, [pc, #132]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 80017b0:	f023 0304 	bic.w	r3, r3, #4
 80017b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d06b      	beq.n	8001898 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff f90e 	bl	80009e0 <HAL_GetTick>
 80017c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	e00b      	b.n	80017e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff f909 	bl	80009e0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e291      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 80017e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001810:	601a      	str	r2, [r3, #0]
  return result;
 8001812:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001816:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	fab3 f383 	clz	r3, r3
 800181c:	b2db      	uxtb	r3, r3
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	b2db      	uxtb	r3, r3
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d109      	bne.n	8001840 <HAL_RCC_OscConfig+0x93c>
 800182c:	4b01      	ldr	r3, [pc, #4]	; (8001834 <HAL_RCC_OscConfig+0x930>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x958>
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000
 8001838:	10908120 	.word	0x10908120
 800183c:	40007000 	.word	0x40007000
 8001840:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	fa93 f2a3 	rbit	r2, r3
 8001852:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	4bbb      	ldr	r3, [pc, #748]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001860:	2102      	movs	r1, #2
 8001862:	6011      	str	r1, [r2, #0]
 8001864:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	fa92 f1a2 	rbit	r1, r2
 800186e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001872:	6011      	str	r1, [r2, #0]
  return result;
 8001874:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	fab2 f282 	clz	r2, r2
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f002 021f 	and.w	r2, r2, #31
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d099      	beq.n	80017ca <HAL_RCC_OscConfig+0x8c6>
 8001896:	e063      	b.n	8001960 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff f8a2 	bl	80009e0 <HAL_GetTick>
 800189c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a0:	e00b      	b.n	80018ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a2:	f7ff f89d 	bl	80009e0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e225      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 80018ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018be:	2202      	movs	r2, #2
 80018c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	fa93 f2a3 	rbit	r2, r3
 80018cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018d6:	2202      	movs	r2, #2
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	fa93 f2a3 	rbit	r2, r3
 80018e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018e8:	601a      	str	r2, [r3, #0]
  return result;
 80018ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	fab3 f383 	clz	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	095b      	lsrs	r3, r3, #5
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d102      	bne.n	800190a <HAL_RCC_OscConfig+0xa06>
 8001904:	4b90      	ldr	r3, [pc, #576]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	e00d      	b.n	8001926 <HAL_RCC_OscConfig+0xa22>
 800190a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800190e:	2202      	movs	r2, #2
 8001910:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001912:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	fa93 f2a3 	rbit	r2, r3
 800191c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800192a:	2102      	movs	r1, #2
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	fa92 f1a2 	rbit	r1, r2
 8001938:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800193c:	6011      	str	r1, [r2, #0]
  return result;
 800193e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	fab2 f282 	clz	r2, r2
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f002 021f 	and.w	r2, r2, #31
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1a0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001960:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	4a76      	ldr	r2, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 800196e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001972:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 81c2 	beq.w	8001d04 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001980:	4b71      	ldr	r3, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	f000 819c 	beq.w	8001cc6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b02      	cmp	r3, #2
 8001996:	f040 8114 	bne.w	8001bc2 <HAL_RCC_OscConfig+0xcbe>
 800199a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800199e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	fa93 f2a3 	rbit	r2, r3
 80019ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019b2:	601a      	str	r2, [r3, #0]
  return result;
 80019b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	fab3 f383 	clz	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	461a      	mov	r2, r3
 80019cc:	2300      	movs	r3, #0
 80019ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff f806 	bl	80009e0 <HAL_GetTick>
 80019d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7ff f801 	bl	80009e0 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e18b      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 80019ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fa93 f2a3 	rbit	r2, r3
 8001a02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a06:	601a      	str	r2, [r3, #0]
  return result;
 8001a08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0e:	fab3 f383 	clz	r3, r3
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	095b      	lsrs	r3, r3, #5
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d102      	bne.n	8001a28 <HAL_RCC_OscConfig+0xb24>
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	e01b      	b.n	8001a60 <HAL_RCC_OscConfig+0xb5c>
 8001a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f2a3 	rbit	r2, r3
 8001a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	fa93 f2a3 	rbit	r2, r3
 8001a56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a68:	6011      	str	r1, [r2, #0]
 8001a6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	fa92 f1a2 	rbit	r1, r2
 8001a74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a78:	6011      	str	r1, [r2, #0]
  return result;
 8001a7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001a7e:	6812      	ldr	r2, [r2, #0]
 8001a80:	fab2 f282 	clz	r2, r2
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	f042 0220 	orr.w	r2, r2, #32
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	f002 021f 	and.w	r2, r2, #31
 8001a90:	2101      	movs	r1, #1
 8001a92:	fa01 f202 	lsl.w	r2, r1, r2
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d19e      	bne.n	80019da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	4925      	ldr	r1, [pc, #148]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
 8001ab8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	fa93 f2a3 	rbit	r2, r3
 8001acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad0:	601a      	str	r2, [r3, #0]
  return result;
 8001ad2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad8:	fab3 f383 	clz	r3, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2301      	movs	r3, #1
 8001aec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aee:	f7fe ff77 	bl	80009e0 <HAL_GetTick>
 8001af2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af6:	e009      	b.n	8001b0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7fe ff72 	bl	80009e0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e0fc      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 8001b0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b24:	601a      	str	r2, [r3, #0]
  return result;
 8001b26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0xc48>
 8001b40:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <HAL_RCC_OscConfig+0xc44>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e01e      	b.n	8001b84 <HAL_RCC_OscConfig+0xc80>
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_OscConfig+0xe0c>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b9c:	6011      	str	r1, [r2, #0]
  return result;
 8001b9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d09b      	beq.n	8001af8 <HAL_RCC_OscConfig+0xbf4>
 8001bc0:	e0a0      	b.n	8001d04 <HAL_RCC_OscConfig+0xe00>
 8001bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	fa93 f2a3 	rbit	r2, r3
 8001bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bda:	601a      	str	r2, [r3, #0]
  return result;
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	fab3 f383 	clz	r3, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fef2 	bl	80009e0 <HAL_GetTick>
 8001bfc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e009      	b.n	8001c16 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c02:	f7fe feed 	bl	80009e0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e077      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
 8001c16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2e:	601a      	str	r2, [r3, #0]
  return result;
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	095b      	lsrs	r3, r3, #5
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d102      	bne.n	8001c50 <HAL_RCC_OscConfig+0xd4c>
 8001c4a:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_OscConfig+0xe0c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	e01b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd84>
 8001c50:	f107 0320 	add.w	r3, r7, #32
 8001c54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5a:	f107 0320 	add.w	r3, r7, #32
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fa93 f2a3 	rbit	r2, r3
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	4b22      	ldr	r3, [pc, #136]	; (8001d10 <HAL_RCC_OscConfig+0xe0c>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	f107 0210 	add.w	r2, r7, #16
 8001c8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c90:	6011      	str	r1, [r2, #0]
 8001c92:	f107 0210 	add.w	r2, r7, #16
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	fa92 f1a2 	rbit	r1, r2
 8001c9c:	f107 020c 	add.w	r2, r7, #12
 8001ca0:	6011      	str	r1, [r2, #0]
  return result;
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	fab2 f282 	clz	r2, r2
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	f042 0220 	orr.w	r2, r2, #32
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	f002 021f 	and.w	r2, r2, #31
 8001cb8:	2101      	movs	r1, #1
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d19e      	bne.n	8001c02 <HAL_RCC_OscConfig+0xcfe>
 8001cc4:	e01e      	b.n	8001d04 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e018      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_RCC_OscConfig+0xe0c>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cdc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ce0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d108      	bne.n	8001d00 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001cee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001cf2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b09e      	sub	sp, #120	; 0x78
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e162      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d2c:	4b90      	ldr	r3, [pc, #576]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d910      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3a:	4b8d      	ldr	r3, [pc, #564]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 0207 	bic.w	r2, r3, #7
 8001d42:	498b      	ldr	r1, [pc, #556]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e14a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d008      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	497f      	ldr	r1, [pc, #508]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80dc 	beq.w	8001f40 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d13c      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xf6>
 8001d90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_ClockConfig+0xa6>
 8001db4:	4b6f      	ldr	r3, [pc, #444]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	e00f      	b.n	8001dda <HAL_RCC_ClockConfig+0xc6>
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8001dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 8001dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dde:	65ba      	str	r2, [r7, #88]	; 0x58
 8001de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001de2:	fa92 f2a2 	rbit	r2, r2
 8001de6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001de8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dea:	fab2 f282 	clz	r2, r2
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	f042 0220 	orr.w	r2, r2, #32
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	f002 021f 	and.w	r2, r2, #31
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d17b      	bne.n	8001efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0f3      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d13c      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x178>
 8001e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e1a:	fa93 f3a3 	rbit	r3, r3
 8001e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	fab3 f383 	clz	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d102      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x128>
 8001e36:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e00f      	b.n	8001e5c <HAL_RCC_ClockConfig+0x148>
 8001e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e44:	fa93 f3a3 	rbit	r3, r3
 8001e48:	647b      	str	r3, [r7, #68]	; 0x44
 8001e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e4e:	643b      	str	r3, [r7, #64]	; 0x40
 8001e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e58:	4b46      	ldr	r3, [pc, #280]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e60:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e64:	fa92 f2a2 	rbit	r2, r2
 8001e68:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f002 021f 	and.w	r2, r2, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d13a      	bne.n	8001efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b2      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	fa93 f3a3 	rbit	r3, r3
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	095b      	lsrs	r3, r3, #5
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d102      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x1a0>
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	e00d      	b.n	8001ed0 <HAL_RCC_ClockConfig+0x1bc>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	61ba      	str	r2, [r7, #24]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	fa92 f2a2 	rbit	r2, r2
 8001eda:	617a      	str	r2, [r7, #20]
  return result;
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	fab2 f282 	clz	r2, r2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	f042 0220 	orr.w	r2, r2, #32
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	f002 021f 	and.w	r2, r2, #31
 8001eee:	2101      	movs	r1, #1
 8001ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e079      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f023 0203 	bic.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	491a      	ldr	r1, [pc, #104]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f10:	f7fe fd66 	bl	80009e0 <HAL_GetTick>
 8001f14:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f18:	f7fe fd62 	bl	80009e0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e061      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_ClockConfig+0x260>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 020c 	and.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1eb      	bne.n	8001f18 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f40:	4b0b      	ldr	r3, [pc, #44]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d214      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 0207 	bic.w	r2, r3, #7
 8001f56:	4906      	ldr	r1, [pc, #24]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_RCC_ClockConfig+0x25c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e040      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x2de>
 8001f70:	40022000 	.word	0x40022000
 8001f74:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	491a      	ldr	r1, [pc, #104]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4912      	ldr	r1, [pc, #72]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb6:	f000 f829 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fba:	4601      	mov	r1, r0
 8001fbc:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_RCC_ClockConfig+0x2e8>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc4:	22f0      	movs	r2, #240	; 0xf0
 8001fc6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	60fa      	str	r2, [r7, #12]
  return result;
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	fab2 f282 	clz	r2, r2
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	40d3      	lsrs	r3, r2
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x2ec>)
 8001fdc:	5cd3      	ldrb	r3, [r2, r3]
 8001fde:	fa21 f303 	lsr.w	r3, r1, r3
 8001fe2:	4a08      	ldr	r2, [pc, #32]	; (8002004 <HAL_RCC_ClockConfig+0x2f0>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <HAL_RCC_ClockConfig+0x2f4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fba0 	bl	8000730 <HAL_InitTick>
  
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3778      	adds	r7, #120	; 0x78
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	080064d0 	.word	0x080064d0
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b480      	push	{r7}
 800200e:	b08b      	sub	sp, #44	; 0x2c
 8002010:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b04      	cmp	r3, #4
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x30>
 8002036:	2b08      	cmp	r3, #8
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x36>
 800203a:	e03c      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800203e:	623b      	str	r3, [r7, #32]
      break;
 8002040:	e03c      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002048:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800204c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	fa92 f2a2 	rbit	r2, r2
 8002054:	607a      	str	r2, [r7, #4]
  return result;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	fab2 f282 	clz	r2, r2
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	40d3      	lsrs	r3, r2
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002062:	5cd3      	ldrb	r3, [r2, r3]
 8002064:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	220f      	movs	r2, #15
 8002070:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	60fa      	str	r2, [r7, #12]
  return result;
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	40d3      	lsrs	r3, r2
 8002084:	4a14      	ldr	r2, [pc, #80]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d008      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002094:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	fbb2 f2f3 	udiv	r2, r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
 80020a4:	e004      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	623b      	str	r3, [r7, #32]
      break;
 80020b4:	e002      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020b8:	623b      	str	r3, [r7, #32]
      break;
 80020ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020bc:	6a3b      	ldr	r3, [r7, #32]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	372c      	adds	r7, #44	; 0x2c
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	007a1200 	.word	0x007a1200
 80020d4:	080064e8 	.word	0x080064e8
 80020d8:	080064f8 	.word	0x080064f8
 80020dc:	003d0900 	.word	0x003d0900

080020e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80020fe:	f7ff ffef 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800210c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002110:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	fa92 f2a2 	rbit	r2, r2
 8002118:	603a      	str	r2, [r7, #0]
  return result;
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	40d3      	lsrs	r3, r2
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	080064e0 	.word	0x080064e0

0800213c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002142:	f7ff ffcd 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002146:	4601      	mov	r1, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002150:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002154:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	fa92 f2a2 	rbit	r2, r2
 800215c:	603a      	str	r2, [r7, #0]
  return result;
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	40d3      	lsrs	r3, r2
 8002168:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_RCC_GetPCLK2Freq+0x40>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002170:	4618      	mov	r0, r3
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	080064e0 	.word	0x080064e0

08002180 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	220f      	movs	r2, #15
 800218e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0203 	and.w	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80021a8:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021b4:	4b09      	ldr	r3, [pc, #36]	; (80021dc <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_RCC_GetClockConfig+0x60>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0207 	and.w	r2, r3, #7
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	601a      	str	r2, [r3, #0]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40022000 	.word	0x40022000

080021e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b092      	sub	sp, #72	; 0x48
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80d4 	beq.w	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002208:	4b4e      	ldr	r3, [pc, #312]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220a:	69db      	ldr	r3, [r3, #28]
 800220c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10e      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b4b      	ldr	r3, [pc, #300]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002216:	69db      	ldr	r3, [r3, #28]
 8002218:	4a4a      	ldr	r2, [pc, #296]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	61d3      	str	r3, [r2, #28]
 8002220:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b45      	ldr	r3, [pc, #276]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a41      	ldr	r2, [pc, #260]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe fbc9 	bl	80009e0 <HAL_GetTick>
 800224e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe fbc5 	bl	80009e0 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e14b      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002270:	4b34      	ldr	r3, [pc, #208]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002278:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800227a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 8084 	beq.w	800238a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800228a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800228c:	429a      	cmp	r2, r3
 800228e:	d07c      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002290:	4b2c      	ldr	r3, [pc, #176]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800229a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	461a      	mov	r2, r3
 80022ba:	2301      	movs	r3, #1
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d8:	4413      	add	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	461a      	mov	r2, r3
 80022de:	2300      	movs	r3, #0
 80022e0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022e6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d04b      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fb75 	bl	80009e0 <HAL_GetTick>
 80022f6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fb71 	bl	80009e0 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e0f5      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002310:	2302      	movs	r3, #2
 8002312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
 800231c:	2302      	movs	r3, #2
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	fa93 f3a3 	rbit	r3, r3
 8002326:	61fb      	str	r3, [r7, #28]
  return result;
 8002328:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232a:	fab3 f383 	clz	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	095b      	lsrs	r3, r3, #5
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d108      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800233e:	4b01      	ldr	r3, [pc, #4]	; (8002344 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	e00d      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	10908100 	.word	0x10908100
 8002350:	2302      	movs	r3, #2
 8002352:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	4b69      	ldr	r3, [pc, #420]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2202      	movs	r2, #2
 8002362:	613a      	str	r2, [r7, #16]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	fa92 f2a2 	rbit	r2, r2
 800236a:	60fa      	str	r2, [r7, #12]
  return result;
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	fab2 f282 	clz	r2, r2
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	f002 021f 	and.w	r2, r2, #31
 800237e:	2101      	movs	r1, #1
 8002380:	fa01 f202 	lsl.w	r2, r1, r2
 8002384:	4013      	ands	r3, r2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0b7      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800238a:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	495b      	ldr	r1, [pc, #364]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002398:	4313      	orrs	r3, r2
 800239a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800239c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d105      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a4:	4b57      	ldr	r3, [pc, #348]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a56      	ldr	r2, [pc, #344]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023bc:	4b51      	ldr	r3, [pc, #324]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f023 0203 	bic.w	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	494e      	ldr	r1, [pc, #312]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0320 	and.w	r3, r3, #32
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023da:	4b4a      	ldr	r3, [pc, #296]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f023 0210 	bic.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4947      	ldr	r1, [pc, #284]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	493f      	ldr	r1, [pc, #252]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002406:	4313      	orrs	r3, r2
 8002408:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b00      	cmp	r3, #0
 8002414:	d008      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002416:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f023 0220 	bic.w	r2, r3, #32
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	4938      	ldr	r1, [pc, #224]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002424:	4313      	orrs	r3, r2
 8002426:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002434:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	4930      	ldr	r1, [pc, #192]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002442:	4313      	orrs	r3, r2
 8002444:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002452:	4b2c      	ldr	r3, [pc, #176]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	4929      	ldr	r1, [pc, #164]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002470:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4921      	ldr	r1, [pc, #132]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800247e:	4313      	orrs	r3, r2
 8002480:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	491a      	ldr	r1, [pc, #104]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800249c:	4313      	orrs	r3, r2
 800249e:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	4912      	ldr	r1, [pc, #72]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d6:	490b      	ldr	r1, [pc, #44]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	4903      	ldr	r1, [pc, #12]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3748      	adds	r7, #72	; 0x48
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000

08002508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e049      	b.n	80025ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d106      	bne.n	8002534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f841 	bl	80025b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3304      	adds	r3, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f000 f9dc 	bl	8002904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d001      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e03b      	b.n	800265c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <HAL_TIM_Base_Start_IT+0x9c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d009      	beq.n	800261a <HAL_TIM_Base_Start_IT+0x4e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800260e:	d004      	beq.n	800261a <HAL_TIM_Base_Start_IT+0x4e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_TIM_Base_Start_IT+0xa0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d115      	bne.n	8002646 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <HAL_TIM_Base_Start_IT+0xa4>)
 8002622:	4013      	ands	r3, r2
 8002624:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b06      	cmp	r3, #6
 800262a:	d015      	beq.n	8002658 <HAL_TIM_Base_Start_IT+0x8c>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d011      	beq.n	8002658 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	e008      	b.n	8002658 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e000      	b.n	800265a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40014000 	.word	0x40014000
 8002670:	00010007 	.word	0x00010007

08002674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0202 	mvn.w	r2, #2
 80026a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f905 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8f7 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f908 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0204 	mvn.w	r2, #4
 80026f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f8db 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f8cd 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8de 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	2b08      	cmp	r3, #8
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b08      	cmp	r3, #8
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0208 	mvn.w	r2, #8
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2204      	movs	r2, #4
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f8b1 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8a3 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f8b4 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b10      	cmp	r3, #16
 8002784:	d122      	bne.n	80027cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b10      	cmp	r3, #16
 8002792:	d11b      	bne.n	80027cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0210 	mvn.w	r2, #16
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2208      	movs	r2, #8
 80027a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f887 	bl	80028c6 <HAL_TIM_IC_CaptureCallback>
 80027b8:	e005      	b.n	80027c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f879 	bl	80028b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f88a 	bl	80028da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d10e      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d107      	bne.n	80027f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f06f 0201 	mvn.w	r2, #1
 80027f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fd ff1c 	bl	8000630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002802:	2b80      	cmp	r3, #128	; 0x80
 8002804:	d10e      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d107      	bne.n	8002824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800281c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8e8 	bl	80029f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002832:	d10e      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d107      	bne.n	8002852 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800284a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 f8db 	bl	8002a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d10e      	bne.n	800287e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d107      	bne.n	800287e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f838 	bl	80028ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b20      	cmp	r3, #32
 800288a:	d10e      	bne.n	80028aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d107      	bne.n	80028aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0220 	mvn.w	r2, #32
 80028a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f89b 	bl	80029e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028aa:	bf00      	nop
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2e      	ldr	r2, [pc, #184]	; (80029d0 <TIM_Base_SetConfig+0xcc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <TIM_Base_SetConfig+0x20>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002922:	d108      	bne.n	8002936 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <TIM_Base_SetConfig+0xcc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0x5a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0x5a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <TIM_Base_SetConfig+0xd0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0x5a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <TIM_Base_SetConfig+0xd4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x5a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a20      	ldr	r2, [pc, #128]	; (80029dc <TIM_Base_SetConfig+0xd8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <TIM_Base_SetConfig+0xcc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00b      	beq.n	80029b4 <TIM_Base_SetConfig+0xb0>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0d      	ldr	r2, [pc, #52]	; (80029d4 <TIM_Base_SetConfig+0xd0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <TIM_Base_SetConfig+0xb0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <TIM_Base_SetConfig+0xd4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_Base_SetConfig+0xb0>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <TIM_Base_SetConfig+0xd8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d103      	bne.n	80029bc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	691a      	ldr	r2, [r3, #16]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	615a      	str	r2, [r3, #20]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40014400 	.word	0x40014400
 80029dc:	40014800 	.word	0x40014800

080029e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e040      	b.n	8002ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f7fd fe34 	bl	80006ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2224      	movs	r2, #36	; 0x24
 8002a48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8c0 	bl	8002be0 <UART_SetConfig>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f9ec 	bl	8002e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fa73 	bl	8002f94 <UART_CheckIdleState>
 8002aae:	4603      	mov	r3, r0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b08a      	sub	sp, #40	; 0x28
 8002abc:	af02      	add	r7, sp, #8
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	f040 8082 	bne.w	8002bd6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_UART_Transmit+0x26>
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07a      	b.n	8002bd8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_UART_Transmit+0x38>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e073      	b.n	8002bd8 <HAL_UART_Transmit+0x120>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2221      	movs	r2, #33	; 0x21
 8002b04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b06:	f7fd ff6b 	bl	80009e0 <HAL_GetTick>
 8002b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	88fa      	ldrh	r2, [r7, #6]
 8002b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d108      	bne.n	8002b38 <HAL_UART_Transmit+0x80>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e003      	b.n	8002b40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b48:	e02d      	b.n	8002ba6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2200      	movs	r2, #0
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 fa66 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e039      	b.n	8002bd8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d10b      	bne.n	8002b82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b76:	b292      	uxth	r2, r2
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	61bb      	str	r3, [r7, #24]
 8002b80:	e008      	b.n	8002b94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	781a      	ldrb	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3301      	adds	r3, #1
 8002b92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1cb      	bne.n	8002b4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2140      	movs	r1, #64	; 0x40
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fa32 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e005      	b.n	8002bd8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <UART_SetConfig+0x258>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	6979      	ldr	r1, [r7, #20]
 8002c14:	430b      	orrs	r3, r1
 8002c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a79      	ldr	r2, [pc, #484]	; (8002e3c <UART_SetConfig+0x25c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d121      	bne.n	8002ca0 <UART_SetConfig+0xc0>
 8002c5c:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <UART_SetConfig+0x260>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	f003 0303 	and.w	r3, r3, #3
 8002c64:	2b03      	cmp	r3, #3
 8002c66:	d817      	bhi.n	8002c98 <UART_SetConfig+0xb8>
 8002c68:	a201      	add	r2, pc, #4	; (adr r2, 8002c70 <UART_SetConfig+0x90>)
 8002c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c6e:	bf00      	nop
 8002c70:	08002c81 	.word	0x08002c81
 8002c74:	08002c8d 	.word	0x08002c8d
 8002c78:	08002c93 	.word	0x08002c93
 8002c7c:	08002c87 	.word	0x08002c87
 8002c80:	2300      	movs	r3, #0
 8002c82:	77fb      	strb	r3, [r7, #31]
 8002c84:	e01e      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002c86:	2302      	movs	r3, #2
 8002c88:	77fb      	strb	r3, [r7, #31]
 8002c8a:	e01b      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	77fb      	strb	r3, [r7, #31]
 8002c90:	e018      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002c92:	2308      	movs	r3, #8
 8002c94:	77fb      	strb	r3, [r7, #31]
 8002c96:	e015      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	bf00      	nop
 8002c9e:	e011      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a67      	ldr	r2, [pc, #412]	; (8002e44 <UART_SetConfig+0x264>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d102      	bne.n	8002cb0 <UART_SetConfig+0xd0>
 8002caa:	2300      	movs	r3, #0
 8002cac:	77fb      	strb	r3, [r7, #31]
 8002cae:	e009      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a64      	ldr	r2, [pc, #400]	; (8002e48 <UART_SetConfig+0x268>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d102      	bne.n	8002cc0 <UART_SetConfig+0xe0>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e001      	b.n	8002cc4 <UART_SetConfig+0xe4>
 8002cc0:	2310      	movs	r3, #16
 8002cc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ccc:	d15c      	bne.n	8002d88 <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8002cce:	7ffb      	ldrb	r3, [r7, #31]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d828      	bhi.n	8002d26 <UART_SetConfig+0x146>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <UART_SetConfig+0xfc>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d01 	.word	0x08002d01
 8002ce0:	08002d09 	.word	0x08002d09
 8002ce4:	08002d11 	.word	0x08002d11
 8002ce8:	08002d27 	.word	0x08002d27
 8002cec:	08002d17 	.word	0x08002d17
 8002cf0:	08002d27 	.word	0x08002d27
 8002cf4:	08002d27 	.word	0x08002d27
 8002cf8:	08002d27 	.word	0x08002d27
 8002cfc:	08002d1f 	.word	0x08002d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d00:	f7ff f9fa 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8002d04:	61b8      	str	r0, [r7, #24]
        break;
 8002d06:	e013      	b.n	8002d30 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d08:	f7ff fa18 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8002d0c:	61b8      	str	r0, [r7, #24]
        break;
 8002d0e:	e00f      	b.n	8002d30 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d10:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <UART_SetConfig+0x26c>)
 8002d12:	61bb      	str	r3, [r7, #24]
        break;
 8002d14:	e00c      	b.n	8002d30 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d16:	f7ff f979 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002d1a:	61b8      	str	r0, [r7, #24]
        break;
 8002d1c:	e008      	b.n	8002d30 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d22:	61bb      	str	r3, [r7, #24]
        break;
 8002d24:	e004      	b.n	8002d30 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d074      	beq.n	8002e20 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	005a      	lsls	r2, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	441a      	add	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	d916      	bls.n	8002d82 <UART_SetConfig+0x1a2>
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d5a:	d212      	bcs.n	8002d82 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f023 030f 	bic.w	r3, r3, #15
 8002d64:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	89fa      	ldrh	r2, [r7, #14]
 8002d7e:	60da      	str	r2, [r3, #12]
 8002d80:	e04e      	b.n	8002e20 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	77bb      	strb	r3, [r7, #30]
 8002d86:	e04b      	b.n	8002e20 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d827      	bhi.n	8002dde <UART_SetConfig+0x1fe>
 8002d8e:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <UART_SetConfig+0x1b4>)
 8002d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d94:	08002db9 	.word	0x08002db9
 8002d98:	08002dc1 	.word	0x08002dc1
 8002d9c:	08002dc9 	.word	0x08002dc9
 8002da0:	08002ddf 	.word	0x08002ddf
 8002da4:	08002dcf 	.word	0x08002dcf
 8002da8:	08002ddf 	.word	0x08002ddf
 8002dac:	08002ddf 	.word	0x08002ddf
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002dd7 	.word	0x08002dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002db8:	f7ff f99e 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	61b8      	str	r0, [r7, #24]
        break;
 8002dbe:	e013      	b.n	8002de8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc0:	f7ff f9bc 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8002dc4:	61b8      	str	r0, [r7, #24]
        break;
 8002dc6:	e00f      	b.n	8002de8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dc8:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <UART_SetConfig+0x26c>)
 8002dca:	61bb      	str	r3, [r7, #24]
        break;
 8002dcc:	e00c      	b.n	8002de8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dce:	f7ff f91d 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8002dd2:	61b8      	str	r0, [r7, #24]
        break;
 8002dd4:	e008      	b.n	8002de8 <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dda:	61bb      	str	r3, [r7, #24]
        break;
 8002ddc:	e004      	b.n	8002de8 <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	77bb      	strb	r3, [r7, #30]
        break;
 8002de6:	bf00      	nop
    }

    if (pclk != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d018      	beq.n	8002e20 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	085a      	lsrs	r2, r3, #1
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	441a      	add	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b0f      	cmp	r3, #15
 8002e08:	d908      	bls.n	8002e1c <UART_SetConfig+0x23c>
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d204      	bcs.n	8002e1c <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	e001      	b.n	8002e20 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	efff69f3 	.word	0xefff69f3
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40004400 	.word	0x40004400
 8002e48:	40004800 	.word	0x40004800
 8002e4c:	007a1200 	.word	0x007a1200

08002e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	430a      	orrs	r2, r1
 8002f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f4e:	d10a      	bne.n	8002f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fa4:	f7fd fd1c 	bl	80009e0 <HAL_GetTick>
 8002fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d10e      	bne.n	8002fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f82d 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e023      	b.n	800301e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d10e      	bne.n	8003002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 f817 	bl	8003026 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e00d      	b.n	800301e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b09c      	sub	sp, #112	; 0x70
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	4613      	mov	r3, r2
 8003034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003036:	e0a5      	b.n	8003184 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	f000 80a1 	beq.w	8003184 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fd fccd 	bl	80009e0 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <UART_WaitOnFlagUntilTimeout+0x32>
 8003052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003054:	2b00      	cmp	r3, #0
 8003056:	d13e      	bne.n	80030d6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003060:	e853 3f00 	ldrex	r3, [r3]
 8003064:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800306c:	667b      	str	r3, [r7, #100]	; 0x64
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003078:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800307c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e6      	bne.n	8003058 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3308      	adds	r3, #8
 8003090:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800309a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	663b      	str	r3, [r7, #96]	; 0x60
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3308      	adds	r3, #8
 80030a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80030ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030b2:	e841 2300 	strex	r3, r2, [r1]
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e5      	bne.n	800308a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2220      	movs	r2, #32
 80030c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e067      	b.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d04f      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f2:	d147      	bne.n	8003184 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	e853 3f00 	ldrex	r3, [r3]
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
 800311e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003124:	e841 2300 	strex	r3, r2, [r1]
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e6      	bne.n	80030fe <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3308      	adds	r3, #8
 8003136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	e853 3f00 	ldrex	r3, [r3]
 800313e:	613b      	str	r3, [r7, #16]
   return(result);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	66bb      	str	r3, [r7, #104]	; 0x68
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3308      	adds	r3, #8
 800314e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003150:	623a      	str	r2, [r7, #32]
 8003152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003154:	69f9      	ldr	r1, [r7, #28]
 8003156:	6a3a      	ldr	r2, [r7, #32]
 8003158:	e841 2300 	strex	r3, r2, [r1]
 800315c:	61bb      	str	r3, [r7, #24]
   return(result);
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e5      	bne.n	8003130 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e010      	b.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	79fb      	ldrb	r3, [r7, #7]
 800319e:	429a      	cmp	r2, r3
 80031a0:	f43f af4a 	beq.w	8003038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3770      	adds	r7, #112	; 0x70
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
	...

080031b0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b6:	f3ef 8305 	mrs	r3, IPSR
 80031ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80031bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c2:	f3ef 8310 	mrs	r3, PRIMASK
 80031c6:	607b      	str	r3, [r7, #4]
  return(result);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <osKernelInitialize+0x32>
 80031ce:	4b11      	ldr	r3, [pc, #68]	; (8003214 <osKernelInitialize+0x64>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d109      	bne.n	80031ea <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031d6:	f3ef 8311 	mrs	r3, BASEPRI
 80031da:	603b      	str	r3, [r7, #0]
  return(result);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80031e2:	f06f 0305 	mvn.w	r3, #5
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	e00c      	b.n	8003204 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80031ea:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <osKernelInitialize+0x64>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80031f2:	4b08      	ldr	r3, [pc, #32]	; (8003214 <osKernelInitialize+0x64>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e002      	b.n	8003204 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003204:	68fb      	ldr	r3, [r7, #12]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000098 	.word	0x20000098

08003218 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321e:	f3ef 8305 	mrs	r3, IPSR
 8003222:	60bb      	str	r3, [r7, #8]
  return(result);
 8003224:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322a:	f3ef 8310 	mrs	r3, PRIMASK
 800322e:	607b      	str	r3, [r7, #4]
  return(result);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d109      	bne.n	800324a <osKernelStart+0x32>
 8003236:	4b11      	ldr	r3, [pc, #68]	; (800327c <osKernelStart+0x64>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d109      	bne.n	8003252 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800323e:	f3ef 8311 	mrs	r3, BASEPRI
 8003242:	603b      	str	r3, [r7, #0]
  return(result);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <osKernelStart+0x3a>
    stat = osErrorISR;
 800324a:	f06f 0305 	mvn.w	r3, #5
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	e00e      	b.n	8003270 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <osKernelStart+0x64>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <osKernelStart+0x64>)
 800325c:	2202      	movs	r2, #2
 800325e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003260:	f001 f86a 	bl	8004338 <vTaskStartScheduler>
      stat = osOK;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e002      	b.n	8003270 <osKernelStart+0x58>
    } else {
      stat = osError;
 800326a:	f04f 33ff 	mov.w	r3, #4294967295
 800326e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003270:	68fb      	ldr	r3, [r7, #12]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000098 	.word	0x20000098

08003280 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b092      	sub	sp, #72	; 0x48
 8003284:	af04      	add	r7, sp, #16
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003290:	f3ef 8305 	mrs	r3, IPSR
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003298:	2b00      	cmp	r3, #0
 800329a:	f040 8094 	bne.w	80033c6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800329e:	f3ef 8310 	mrs	r3, PRIMASK
 80032a2:	623b      	str	r3, [r7, #32]
  return(result);
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 808d 	bne.w	80033c6 <osThreadNew+0x146>
 80032ac:	4b48      	ldr	r3, [pc, #288]	; (80033d0 <osThreadNew+0x150>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d106      	bne.n	80032c2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032b4:	f3ef 8311 	mrs	r3, BASEPRI
 80032b8:	61fb      	str	r3, [r7, #28]
  return(result);
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8082 	bne.w	80033c6 <osThreadNew+0x146>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d07e      	beq.n	80033c6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80032cc:	2318      	movs	r3, #24
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80032d0:	2300      	movs	r3, #0
 80032d2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80032d4:	f107 031b 	add.w	r3, r7, #27
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d045      	beq.n	8003372 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <osThreadNew+0x74>
        name = attr->name;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <osThreadNew+0x9a>
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2b38      	cmp	r3, #56	; 0x38
 800330c:	d805      	bhi.n	800331a <osThreadNew+0x9a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <osThreadNew+0x9e>
        return (NULL);
 800331a:	2300      	movs	r3, #0
 800331c:	e054      	b.n	80033c8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <osThreadNew+0xd4>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b5b      	cmp	r3, #91	; 0x5b
 800333c:	d90a      	bls.n	8003354 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <osThreadNew+0xd4>
        mem = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
 8003352:	e010      	b.n	8003376 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <osThreadNew+0xf6>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <osThreadNew+0xf6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <osThreadNew+0xf6>
          mem = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003370:	e001      	b.n	8003376 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2b01      	cmp	r3, #1
 800337a:	d110      	bne.n	800339e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003384:	9202      	str	r2, [sp, #8]
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003390:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fe08 	bl	8003fa8 <xTaskCreateStatic>
 8003398:	4603      	mov	r3, r0
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	e013      	b.n	80033c6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800339e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d110      	bne.n	80033c6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fe4f 	bl	800405a <xTaskCreate>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <osThreadNew+0x146>
          hTask = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3738      	adds	r7, #56	; 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	20000098 	.word	0x20000098

080033d4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033dc:	f3ef 8305 	mrs	r3, IPSR
 80033e0:	613b      	str	r3, [r7, #16]
  return(result);
 80033e2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033e8:	f3ef 8310 	mrs	r3, PRIMASK
 80033ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <osDelay+0x34>
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <osDelay+0x58>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d109      	bne.n	8003410 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033fc:	f3ef 8311 	mrs	r3, BASEPRI
 8003400:	60bb      	str	r3, [r7, #8]
  return(result);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <osDelay+0x3c>
    stat = osErrorISR;
 8003408:	f06f 0305 	mvn.w	r3, #5
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	e007      	b.n	8003420 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <osDelay+0x4c>
      vTaskDelay(ticks);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 ff58 	bl	80042d0 <vTaskDelay>
    }
  }

  return (stat);
 8003420:	697b      	ldr	r3, [r7, #20]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000098 	.word	0x20000098

08003430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a07      	ldr	r2, [pc, #28]	; (800345c <vApplicationGetIdleTaskMemory+0x2c>)
 8003440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4a06      	ldr	r2, [pc, #24]	; (8003460 <vApplicationGetIdleTaskMemory+0x30>)
 8003446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	601a      	str	r2, [r3, #0]
}
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000009c 	.word	0x2000009c
 8003460:	200000f8 	.word	0x200000f8

08003464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a07      	ldr	r2, [pc, #28]	; (8003490 <vApplicationGetTimerTaskMemory+0x2c>)
 8003474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a06      	ldr	r2, [pc, #24]	; (8003494 <vApplicationGetTimerTaskMemory+0x30>)
 800347a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003482:	601a      	str	r2, [r3, #0]
}
 8003484:	bf00      	nop
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	200002f8 	.word	0x200002f8
 8003494:	20000354 	.word	0x20000354

08003498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f103 0208 	add.w	r2, r3, #8
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f103 0208 	add.w	r2, r3, #8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f103 0208 	add.w	r2, r3, #8
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	601a      	str	r2, [r3, #0]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800353a:	b480      	push	{r7}
 800353c:	b085      	sub	sp, #20
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
 8003542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d103      	bne.n	800355a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e00c      	b.n	8003574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3308      	adds	r3, #8
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	e002      	b.n	8003568 <vListInsert+0x2e>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d2f6      	bcs.n	8003562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	601a      	str	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6892      	ldr	r2, [r2, #8]
 80035c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6852      	ldr	r2, [r2, #4]
 80035cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d103      	bne.n	80035e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003618:	f383 8811 	msr	BASEPRI, r3
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	e7fe      	b.n	8003626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003628:	f001 ffd8 	bl	80055dc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	3b01      	subs	r3, #1
 800365a:	68f9      	ldr	r1, [r7, #12]
 800365c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	441a      	add	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	22ff      	movs	r2, #255	; 0xff
 800366c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	22ff      	movs	r2, #255	; 0xff
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d114      	bne.n	80036a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01a      	beq.n	80036bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	3310      	adds	r3, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f001 f8da 	bl	8004844 <xTaskRemoveFromEventList>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <xQueueGenericReset+0xcc>)
 8003698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	e009      	b.n	80036bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	3310      	adds	r3, #16
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fef3 	bl	8003498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3324      	adds	r3, #36	; 0x24
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff feee 	bl	8003498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036bc:	f001 ffbc 	bl	8005638 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036c0:	2301      	movs	r3, #1
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08e      	sub	sp, #56	; 0x38
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d109      	bne.n	80036f8 <xQueueGenericCreateStatic+0x28>
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f6:	e7fe      	b.n	80036f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <xQueueGenericCreateStatic+0x42>
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <xQueueGenericCreateStatic+0x4e>
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <xQueueGenericCreateStatic+0x52>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericCreateStatic+0x54>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <xQueueGenericCreateStatic+0x6c>
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	623b      	str	r3, [r7, #32]
 800373a:	e7fe      	b.n	800373a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <xQueueGenericCreateStatic+0x78>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <xQueueGenericCreateStatic+0x7c>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <xQueueGenericCreateStatic+0x7e>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <xQueueGenericCreateStatic+0x96>
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e7fe      	b.n	8003764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003766:	2350      	movs	r3, #80	; 0x50
 8003768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b50      	cmp	r3, #80	; 0x50
 800376e:	d009      	beq.n	8003784 <xQueueGenericCreateStatic+0xb4>
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	e7fe      	b.n	8003782 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003796:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f805 	bl	80037b4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80037aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3730      	adds	r7, #48	; 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d103      	bne.n	80037d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e002      	b.n	80037d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	68ba      	ldr	r2, [r7, #8]
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037e2:	2101      	movs	r1, #1
 80037e4:	69b8      	ldr	r0, [r7, #24]
 80037e6:	f7ff ff0b 	bl	8003600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	78fa      	ldrb	r2, [r7, #3]
 80037ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
	...

080037fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08e      	sub	sp, #56	; 0x38
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800380a:	2300      	movs	r3, #0
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <xQueueGenericSend+0x30>
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	62bb      	str	r3, [r7, #40]	; 0x28
 800382a:	e7fe      	b.n	800382a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <xQueueGenericSend+0x3e>
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <xQueueGenericSend+0x42>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <xQueueGenericSend+0x44>
 800383e:	2300      	movs	r3, #0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <xQueueGenericSend+0x5c>
 8003844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003848:	f383 8811 	msr	BASEPRI, r3
 800384c:	f3bf 8f6f 	isb	sy
 8003850:	f3bf 8f4f 	dsb	sy
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	e7fe      	b.n	8003856 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d103      	bne.n	8003866 <xQueueGenericSend+0x6a>
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <xQueueGenericSend+0x6e>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <xQueueGenericSend+0x70>
 800386a:	2300      	movs	r3, #0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <xQueueGenericSend+0x88>
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	623b      	str	r3, [r7, #32]
 8003882:	e7fe      	b.n	8003882 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003884:	f001 f99a 	bl	8004bbc <xTaskGetSchedulerState>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <xQueueGenericSend+0x98>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <xQueueGenericSend+0x9c>
 8003894:	2301      	movs	r3, #1
 8003896:	e000      	b.n	800389a <xQueueGenericSend+0x9e>
 8003898:	2300      	movs	r3, #0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <xQueueGenericSend+0xb6>
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e7fe      	b.n	80038b0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038b2:	f001 fe93 	bl	80055dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <xQueueGenericSend+0xcc>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d129      	bne.n	800391c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ce:	f000 f9ff 	bl	8003cd0 <prvCopyDataToQueue>
 80038d2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	3324      	adds	r3, #36	; 0x24
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 ffaf 	bl	8004844 <xTaskRemoveFromEventList>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038ec:	4b3f      	ldr	r3, [pc, #252]	; (80039ec <xQueueGenericSend+0x1f0>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
 80038fc:	e00a      	b.n	8003914 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003904:	4b39      	ldr	r3, [pc, #228]	; (80039ec <xQueueGenericSend+0x1f0>)
 8003906:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003914:	f001 fe90 	bl	8005638 <vPortExitCritical>
				return pdPASS;
 8003918:	2301      	movs	r3, #1
 800391a:	e063      	b.n	80039e4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003922:	f001 fe89 	bl	8005638 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003926:	2300      	movs	r3, #0
 8003928:	e05c      	b.n	80039e4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	4618      	mov	r0, r3
 8003936:	f000 ffe7 	bl	8004908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800393a:	2301      	movs	r3, #1
 800393c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800393e:	f001 fe7b 	bl	8005638 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003942:	f000 fd5d 	bl	8004400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003946:	f001 fe49 	bl	80055dc <vPortEnterCritical>
 800394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003950:	b25b      	sxtb	r3, r3
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	d103      	bne.n	8003960 <xQueueGenericSend+0x164>
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003966:	b25b      	sxtb	r3, r3
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d103      	bne.n	8003976 <xQueueGenericSend+0x17a>
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003976:	f001 fe5f 	bl	8005638 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800397a:	1d3a      	adds	r2, r7, #4
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f000 ffd6 	bl	8004934 <xTaskCheckForTimeOut>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d124      	bne.n	80039d8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800398e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003990:	f000 fa96 	bl	8003ec0 <prvIsQueueFull>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	3310      	adds	r3, #16
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 ff00 	bl	80047a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039aa:	f000 fa21 	bl	8003df0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039ae:	f000 fd35 	bl	800441c <xTaskResumeAll>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f47f af7c 	bne.w	80038b2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <xQueueGenericSend+0x1f0>)
 80039bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	f3bf 8f4f 	dsb	sy
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	e772      	b.n	80038b2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ce:	f000 fa0f 	bl	8003df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039d2:	f000 fd23 	bl	800441c <xTaskResumeAll>
 80039d6:	e76c      	b.n	80038b2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039da:	f000 fa09 	bl	8003df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039de:	f000 fd1d 	bl	800441c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039e2:	2300      	movs	r3, #0
		}
	}
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3738      	adds	r7, #56	; 0x38
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	; 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <xQueueGenericSendFromISR+0x2c>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1a:	e7fe      	b.n	8003a1a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <xQueueGenericSendFromISR+0x3a>
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <xQueueGenericSendFromISR+0x3e>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <xQueueGenericSendFromISR+0x40>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <xQueueGenericSendFromISR+0x58>
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	623b      	str	r3, [r7, #32]
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d103      	bne.n	8003a56 <xQueueGenericSendFromISR+0x66>
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <xQueueGenericSendFromISR+0x6a>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <xQueueGenericSendFromISR+0x6c>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <xQueueGenericSendFromISR+0x84>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	61fb      	str	r3, [r7, #28]
 8003a72:	e7fe      	b.n	8003a72 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a74:	f001 fe8e 	bl	8005794 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a78:	f3ef 8211 	mrs	r2, BASEPRI
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	61ba      	str	r2, [r7, #24]
 8003a8e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a90:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d302      	bcc.n	8003aa6 <xQueueGenericSendFromISR+0xb6>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d12c      	bne.n	8003b00 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ab6:	f000 f90b 	bl	8003cd0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003aba:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d112      	bne.n	8003aea <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d016      	beq.n	8003afa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	3324      	adds	r3, #36	; 0x24
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 feb7 	bl	8004844 <xTaskRemoveFromEventList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00b      	beq.n	8003afa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
 8003ae8:	e007      	b.n	8003afa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003aee:	3301      	adds	r3, #1
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	b25a      	sxtb	r2, r3
 8003af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003afa:	2301      	movs	r3, #1
 8003afc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003afe:	e001      	b.n	8003b04 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	637b      	str	r3, [r7, #52]	; 0x34
 8003b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b06:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3738      	adds	r7, #56	; 0x38
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <xQueueReceive+0x2e>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	e7fe      	b.n	8003b44 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <xQueueReceive+0x3c>
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <xQueueReceive+0x40>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <xQueueReceive+0x42>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <xQueueReceive+0x5a>
 8003b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	e7fe      	b.n	8003b70 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b72:	f001 f823 	bl	8004bbc <xTaskGetSchedulerState>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xQueueReceive+0x6a>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <xQueueReceive+0x6e>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <xQueueReceive+0x70>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <xQueueReceive+0x88>
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	e7fe      	b.n	8003b9e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ba0:	f001 fd1c 	bl	80055dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01f      	beq.n	8003bf0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb4:	f000 f8f6 	bl	8003da4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	1e5a      	subs	r2, r3, #1
 8003bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00f      	beq.n	8003be8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	3310      	adds	r3, #16
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 fe39 	bl	8004844 <xTaskRemoveFromEventList>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d007      	beq.n	8003be8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bd8:	4b3c      	ldr	r3, [pc, #240]	; (8003ccc <xQueueReceive+0x1b4>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003be8:	f001 fd26 	bl	8005638 <vPortExitCritical>
				return pdPASS;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e069      	b.n	8003cc4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bf6:	f001 fd1f 	bl	8005638 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e062      	b.n	8003cc4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c04:	f107 0310 	add.w	r3, r7, #16
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fe7d 	bl	8004908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c12:	f001 fd11 	bl	8005638 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c16:	f000 fbf3 	bl	8004400 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c1a:	f001 fcdf 	bl	80055dc <vPortEnterCritical>
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c24:	b25b      	sxtb	r3, r3
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d103      	bne.n	8003c34 <xQueueReceive+0x11c>
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c3a:	b25b      	sxtb	r3, r3
 8003c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c40:	d103      	bne.n	8003c4a <xQueueReceive+0x132>
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c4a:	f001 fcf5 	bl	8005638 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c4e:	1d3a      	adds	r2, r7, #4
 8003c50:	f107 0310 	add.w	r3, r7, #16
 8003c54:	4611      	mov	r1, r2
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fe6c 	bl	8004934 <xTaskCheckForTimeOut>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d123      	bne.n	8003caa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c64:	f000 f916 	bl	8003e94 <prvIsQueueEmpty>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d017      	beq.n	8003c9e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c70:	3324      	adds	r3, #36	; 0x24
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fd96 	bl	80047a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c7e:	f000 f8b7 	bl	8003df0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c82:	f000 fbcb 	bl	800441c <xTaskResumeAll>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d189      	bne.n	8003ba0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	; (8003ccc <xQueueReceive+0x1b4>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	e780      	b.n	8003ba0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca0:	f000 f8a6 	bl	8003df0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ca4:	f000 fbba 	bl	800441c <xTaskResumeAll>
 8003ca8:	e77a      	b.n	8003ba0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cac:	f000 f8a0 	bl	8003df0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cb0:	f000 fbb4 	bl	800441c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb6:	f000 f8ed 	bl	8003e94 <prvIsQueueEmpty>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f43f af6f 	beq.w	8003ba0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3730      	adds	r7, #48	; 0x30
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10d      	bne.n	8003d0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d14d      	bne.n	8003d92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 ff7c 	bl	8004bf8 <xTaskPriorityDisinherit>
 8003d00:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	e043      	b.n	8003d92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d119      	bne.n	8003d44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6898      	ldr	r0, [r3, #8]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68b9      	ldr	r1, [r7, #8]
 8003d1c:	f001 ff78 	bl	8005c10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	689a      	ldr	r2, [r3, #8]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	441a      	add	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d32b      	bcc.n	8003d92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
 8003d42:	e026      	b.n	8003d92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68d8      	ldr	r0, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	f001 ff5e 	bl	8005c10 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	425b      	negs	r3, r3
 8003d5e:	441a      	add	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68da      	ldr	r2, [r3, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d207      	bcs.n	8003d80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d78:	425b      	negs	r3, r3
 8003d7a:	441a      	add	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d105      	bne.n	8003d92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d9a:	697b      	ldr	r3, [r7, #20]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d018      	beq.n	8003de8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	441a      	add	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d303      	bcc.n	8003dd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68d9      	ldr	r1, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	461a      	mov	r2, r3
 8003de2:	6838      	ldr	r0, [r7, #0]
 8003de4:	f001 ff14 	bl	8005c10 <memcpy>
	}
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003df8:	f001 fbf0 	bl	80055dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e04:	e011      	b.n	8003e2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d012      	beq.n	8003e34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3324      	adds	r3, #36	; 0x24
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fd16 	bl	8004844 <xTaskRemoveFromEventList>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e1e:	f000 fde9 	bl	80049f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	dce9      	bgt.n	8003e06 <prvUnlockQueue+0x16>
 8003e32:	e000      	b.n	8003e36 <prvUnlockQueue+0x46>
					break;
 8003e34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	22ff      	movs	r2, #255	; 0xff
 8003e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e3e:	f001 fbfb 	bl	8005638 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e42:	f001 fbcb 	bl	80055dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e4e:	e011      	b.n	8003e74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fcf1 	bl	8004844 <xTaskRemoveFromEventList>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e68:	f000 fdc4 	bl	80049f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e6c:	7bbb      	ldrb	r3, [r7, #14]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	dce9      	bgt.n	8003e50 <prvUnlockQueue+0x60>
 8003e7c:	e000      	b.n	8003e80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	22ff      	movs	r2, #255	; 0xff
 8003e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e88:	f001 fbd6 	bl	8005638 <vPortExitCritical>
}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e9c:	f001 fb9e 	bl	80055dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e001      	b.n	8003eb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eb2:	f001 fbc1 	bl	8005638 <vPortExitCritical>

	return xReturn;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ec8:	f001 fb88 	bl	80055dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d102      	bne.n	8003ede <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	e001      	b.n	8003ee2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ee2:	f001 fba9 	bl	8005638 <vPortExitCritical>

	return xReturn;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003efa:	2300      	movs	r3, #0
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e014      	b.n	8003f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f00:	4a0e      	ldr	r2, [pc, #56]	; (8003f3c <vQueueAddToRegistry+0x4c>)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f0c:	490b      	ldr	r1, [pc, #44]	; (8003f3c <vQueueAddToRegistry+0x4c>)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f16:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <vQueueAddToRegistry+0x4c>)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f22:	e005      	b.n	8003f30 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b07      	cmp	r3, #7
 8003f2e:	d9e7      	bls.n	8003f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	20001a84 	.word	0x20001a84

08003f40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f50:	f001 fb44 	bl	80055dc <vPortEnterCritical>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f5a:	b25b      	sxtb	r3, r3
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d103      	bne.n	8003f6a <vQueueWaitForMessageRestricted+0x2a>
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d103      	bne.n	8003f80 <vQueueWaitForMessageRestricted+0x40>
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f80:	f001 fb5a 	bl	8005638 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d106      	bne.n	8003f9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	3324      	adds	r3, #36	; 0x24
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fc2b 	bl	80047f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003f9a:	6978      	ldr	r0, [r7, #20]
 8003f9c:	f7ff ff28 	bl	8003df0 <prvUnlockQueue>
	}
 8003fa0:	bf00      	nop
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08e      	sub	sp, #56	; 0x38
 8003fac:	af04      	add	r7, sp, #16
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <xTaskCreateStatic+0x28>
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	e7fe      	b.n	8003fce <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <xTaskCreateStatic+0x42>
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	e7fe      	b.n	8003fe8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003fea:	235c      	movs	r3, #92	; 0x5c
 8003fec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	2b5c      	cmp	r3, #92	; 0x5c
 8003ff2:	d009      	beq.n	8004008 <xTaskCreateStatic+0x60>
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e7fe      	b.n	8004006 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	2b00      	cmp	r3, #0
 800400c:	d01e      	beq.n	800404c <xTaskCreateStatic+0xa4>
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800401c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004026:	2300      	movs	r3, #0
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402c:	9302      	str	r3, [sp, #8]
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004036:	9300      	str	r3, [sp, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 f850 	bl	80040e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004046:	f000 f8d3 	bl	80041f0 <prvAddNewTaskToReadyList>
 800404a:	e001      	b.n	8004050 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004050:	697b      	ldr	r3, [r7, #20]
	}
 8004052:	4618      	mov	r0, r3
 8004054:	3728      	adds	r7, #40	; 0x28
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800405a:	b580      	push	{r7, lr}
 800405c:	b08c      	sub	sp, #48	; 0x30
 800405e:	af04      	add	r7, sp, #16
 8004060:	60f8      	str	r0, [r7, #12]
 8004062:	60b9      	str	r1, [r7, #8]
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800406a:	88fb      	ldrh	r3, [r7, #6]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fbce 	bl	8005810 <pvPortMalloc>
 8004074:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800407c:	205c      	movs	r0, #92	; 0x5c
 800407e:	f001 fbc7 	bl	8005810 <pvPortMalloc>
 8004082:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
 8004090:	e005      	b.n	800409e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004092:	6978      	ldr	r0, [r7, #20]
 8004094:	f001 fc7e 	bl	8005994 <vPortFree>
 8004098:	e001      	b.n	800409e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d017      	beq.n	80040d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	2300      	movs	r3, #0
 80040b0:	9303      	str	r3, [sp, #12]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	9302      	str	r3, [sp, #8]
 80040b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b8:	9301      	str	r3, [sp, #4]
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68b9      	ldr	r1, [r7, #8]
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f80e 	bl	80040e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040c8:	69f8      	ldr	r0, [r7, #28]
 80040ca:	f000 f891 	bl	80041f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040ce:	2301      	movs	r3, #1
 80040d0:	61bb      	str	r3, [r7, #24]
 80040d2:	e002      	b.n	80040da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295
 80040d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040da:	69bb      	ldr	r3, [r7, #24]
	}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80040f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	461a      	mov	r2, r3
 80040fc:	21a5      	movs	r1, #165	; 0xa5
 80040fe:	f001 fd92 	bl	8005c26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800410c:	3b01      	subs	r3, #1
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	f023 0307 	bic.w	r3, r3, #7
 800411a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <prvInitialiseNewTask+0x56>
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	e7fe      	b.n	8004138 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	e012      	b.n	8004166 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	7819      	ldrb	r1, [r3, #0]
 8004148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	3334      	adds	r3, #52	; 0x34
 8004150:	460a      	mov	r2, r1
 8004152:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	4413      	add	r3, r2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d006      	beq.n	800416e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	2b0f      	cmp	r3, #15
 800416a:	d9e9      	bls.n	8004140 <prvInitialiseNewTask+0x5c>
 800416c:	e000      	b.n	8004170 <prvInitialiseNewTask+0x8c>
		{
			break;
 800416e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	2b37      	cmp	r3, #55	; 0x37
 800417c:	d901      	bls.n	8004182 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800417e:	2337      	movs	r3, #55	; 0x37
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800418c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800418e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004190:	2200      	movs	r2, #0
 8004192:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff f99d 	bl	80034d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	3318      	adds	r3, #24
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff f998 	bl	80034d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	2200      	movs	r2, #0
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68f9      	ldr	r1, [r7, #12]
 80041d0:	69b8      	ldr	r0, [r7, #24]
 80041d2:	f001 f8db 	bl	800538c <pxPortInitialiseStack>
 80041d6:	4602      	mov	r2, r0
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e8:	bf00      	nop
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041f8:	f001 f9f0 	bl	80055dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <prvAddNewTaskToReadyList+0xc4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	4a2c      	ldr	r2, [pc, #176]	; (80042b4 <prvAddNewTaskToReadyList+0xc4>)
 8004204:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <prvAddNewTaskToReadyList+0xc8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800420e:	4a2a      	ldr	r2, [pc, #168]	; (80042b8 <prvAddNewTaskToReadyList+0xc8>)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004214:	4b27      	ldr	r3, [pc, #156]	; (80042b4 <prvAddNewTaskToReadyList+0xc4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d110      	bne.n	800423e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800421c:	f000 fc0e 	bl	8004a3c <prvInitialiseTaskLists>
 8004220:	e00d      	b.n	800423e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <prvAddNewTaskToReadyList+0xcc>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d109      	bne.n	800423e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800422a:	4b23      	ldr	r3, [pc, #140]	; (80042b8 <prvAddNewTaskToReadyList+0xc8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	429a      	cmp	r2, r3
 8004236:	d802      	bhi.n	800423e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004238:	4a1f      	ldr	r2, [pc, #124]	; (80042b8 <prvAddNewTaskToReadyList+0xc8>)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <prvAddNewTaskToReadyList+0xd0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3301      	adds	r3, #1
 8004244:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <prvAddNewTaskToReadyList+0xd0>)
 8004246:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004248:	4b1d      	ldr	r3, [pc, #116]	; (80042c0 <prvAddNewTaskToReadyList+0xd0>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	4b1b      	ldr	r3, [pc, #108]	; (80042c4 <prvAddNewTaskToReadyList+0xd4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d903      	bls.n	8004264 <prvAddNewTaskToReadyList+0x74>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <prvAddNewTaskToReadyList+0xd4>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <prvAddNewTaskToReadyList+0xd8>)
 8004272:	441a      	add	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f7ff f939 	bl	80034f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004280:	f001 f9da 	bl	8005638 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004284:	4b0d      	ldr	r3, [pc, #52]	; (80042bc <prvAddNewTaskToReadyList+0xcc>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00e      	beq.n	80042aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800428c:	4b0a      	ldr	r3, [pc, #40]	; (80042b8 <prvAddNewTaskToReadyList+0xc8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d207      	bcs.n	80042aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <prvAddNewTaskToReadyList+0xdc>)
 800429c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000c28 	.word	0x20000c28
 80042b8:	20000754 	.word	0x20000754
 80042bc:	20000c34 	.word	0x20000c34
 80042c0:	20000c44 	.word	0x20000c44
 80042c4:	20000c30 	.word	0x20000c30
 80042c8:	20000758 	.word	0x20000758
 80042cc:	e000ed04 	.word	0xe000ed04

080042d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042d8:	2300      	movs	r3, #0
 80042da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d016      	beq.n	8004310 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042e2:	4b13      	ldr	r3, [pc, #76]	; (8004330 <vTaskDelay+0x60>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <vTaskDelay+0x2e>
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	60bb      	str	r3, [r7, #8]
 80042fc:	e7fe      	b.n	80042fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80042fe:	f000 f87f 	bl	8004400 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004302:	2100      	movs	r1, #0
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fce3 	bl	8004cd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800430a:	f000 f887 	bl	800441c <xTaskResumeAll>
 800430e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d107      	bne.n	8004326 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004316:	4b07      	ldr	r3, [pc, #28]	; (8004334 <vTaskDelay+0x64>)
 8004318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004326:	bf00      	nop
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000c50 	.word	0x20000c50
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b08a      	sub	sp, #40	; 0x28
 800433c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800433e:	2300      	movs	r3, #0
 8004340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004346:	463a      	mov	r2, r7
 8004348:	1d39      	adds	r1, r7, #4
 800434a:	f107 0308 	add.w	r3, r7, #8
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff f86e 	bl	8003430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	9202      	str	r2, [sp, #8]
 800435c:	9301      	str	r3, [sp, #4]
 800435e:	2300      	movs	r3, #0
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	2300      	movs	r3, #0
 8004364:	460a      	mov	r2, r1
 8004366:	4920      	ldr	r1, [pc, #128]	; (80043e8 <vTaskStartScheduler+0xb0>)
 8004368:	4820      	ldr	r0, [pc, #128]	; (80043ec <vTaskStartScheduler+0xb4>)
 800436a:	f7ff fe1d 	bl	8003fa8 <xTaskCreateStatic>
 800436e:	4602      	mov	r2, r0
 8004370:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <vTaskStartScheduler+0xb8>)
 8004372:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004374:	4b1e      	ldr	r3, [pc, #120]	; (80043f0 <vTaskStartScheduler+0xb8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800437c:	2301      	movs	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e001      	b.n	8004386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d102      	bne.n	8004392 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800438c:	f000 fcf4 	bl	8004d78 <xTimerCreateTimerTask>
 8004390:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d115      	bne.n	80043c4 <vTaskStartScheduler+0x8c>
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <vTaskStartScheduler+0xbc>)
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <vTaskStartScheduler+0xc0>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <vTaskStartScheduler+0xc4>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043be:	f001 f86f 	bl	80054a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043c2:	e00d      	b.n	80043e0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d109      	bne.n	80043e0 <vTaskStartScheduler+0xa8>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e7fe      	b.n	80043de <vTaskStartScheduler+0xa6>
}
 80043e0:	bf00      	nop
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	08006470 	.word	0x08006470
 80043ec:	08004a0d 	.word	0x08004a0d
 80043f0:	20000c4c 	.word	0x20000c4c
 80043f4:	20000c48 	.word	0x20000c48
 80043f8:	20000c34 	.word	0x20000c34
 80043fc:	20000c2c 	.word	0x20000c2c

08004400 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <vTaskSuspendAll+0x18>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3301      	adds	r3, #1
 800440a:	4a03      	ldr	r2, [pc, #12]	; (8004418 <vTaskSuspendAll+0x18>)
 800440c:	6013      	str	r3, [r2, #0]
}
 800440e:	bf00      	nop
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20000c50 	.word	0x20000c50

0800441c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800442a:	4b41      	ldr	r3, [pc, #260]	; (8004530 <xTaskResumeAll+0x114>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <xTaskResumeAll+0x2a>
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	e7fe      	b.n	8004444 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004446:	f001 f8c9 	bl	80055dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <xTaskResumeAll+0x114>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3b01      	subs	r3, #1
 8004450:	4a37      	ldr	r2, [pc, #220]	; (8004530 <xTaskResumeAll+0x114>)
 8004452:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <xTaskResumeAll+0x114>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d162      	bne.n	8004522 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <xTaskResumeAll+0x118>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d05e      	beq.n	8004522 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004464:	e02f      	b.n	80044c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <xTaskResumeAll+0x11c>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3318      	adds	r3, #24
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff f89a 	bl	80035ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff f895 	bl	80035ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4b2d      	ldr	r3, [pc, #180]	; (800453c <xTaskResumeAll+0x120>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	429a      	cmp	r2, r3
 800448c:	d903      	bls.n	8004496 <xTaskResumeAll+0x7a>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4a2a      	ldr	r2, [pc, #168]	; (800453c <xTaskResumeAll+0x120>)
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4a27      	ldr	r2, [pc, #156]	; (8004540 <xTaskResumeAll+0x124>)
 80044a4:	441a      	add	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	3304      	adds	r3, #4
 80044aa:	4619      	mov	r1, r3
 80044ac:	4610      	mov	r0, r2
 80044ae:	f7ff f820 	bl	80034f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4b23      	ldr	r3, [pc, #140]	; (8004544 <xTaskResumeAll+0x128>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	429a      	cmp	r2, r3
 80044be:	d302      	bcc.n	80044c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <xTaskResumeAll+0x12c>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044c6:	4b1c      	ldr	r3, [pc, #112]	; (8004538 <xTaskResumeAll+0x11c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1cb      	bne.n	8004466 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044d4:	f000 fb4c 	bl	8004b70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80044d8:	4b1c      	ldr	r3, [pc, #112]	; (800454c <xTaskResumeAll+0x130>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044e4:	f000 f846 	bl	8004574 <xTaskIncrementTick>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d002      	beq.n	80044f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <xTaskResumeAll+0x12c>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f1      	bne.n	80044e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004500:	4b12      	ldr	r3, [pc, #72]	; (800454c <xTaskResumeAll+0x130>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <xTaskResumeAll+0x12c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800450e:	2301      	movs	r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <xTaskResumeAll+0x134>)
 8004514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004522:	f001 f889 	bl	8005638 <vPortExitCritical>

	return xAlreadyYielded;
 8004526:	68bb      	ldr	r3, [r7, #8]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000c50 	.word	0x20000c50
 8004534:	20000c28 	.word	0x20000c28
 8004538:	20000be8 	.word	0x20000be8
 800453c:	20000c30 	.word	0x20000c30
 8004540:	20000758 	.word	0x20000758
 8004544:	20000754 	.word	0x20000754
 8004548:	20000c3c 	.word	0x20000c3c
 800454c:	20000c38 	.word	0x20000c38
 8004550:	e000ed04 	.word	0xe000ed04

08004554 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <xTaskGetTickCount+0x1c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004560:	687b      	ldr	r3, [r7, #4]
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000c2c 	.word	0x20000c2c

08004574 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <xTaskIncrementTick+0x150>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f040 808d 	bne.w	80046a2 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <xTaskIncrementTick+0x154>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004590:	4a4d      	ldr	r2, [pc, #308]	; (80046c8 <xTaskIncrementTick+0x154>)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11f      	bne.n	80045dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800459c:	4b4b      	ldr	r3, [pc, #300]	; (80046cc <xTaskIncrementTick+0x158>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <xTaskIncrementTick+0x46>
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	603b      	str	r3, [r7, #0]
 80045b8:	e7fe      	b.n	80045b8 <xTaskIncrementTick+0x44>
 80045ba:	4b44      	ldr	r3, [pc, #272]	; (80046cc <xTaskIncrementTick+0x158>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	4b43      	ldr	r3, [pc, #268]	; (80046d0 <xTaskIncrementTick+0x15c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a41      	ldr	r2, [pc, #260]	; (80046cc <xTaskIncrementTick+0x158>)
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4a41      	ldr	r2, [pc, #260]	; (80046d0 <xTaskIncrementTick+0x15c>)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <xTaskIncrementTick+0x160>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3301      	adds	r3, #1
 80045d4:	4a3f      	ldr	r2, [pc, #252]	; (80046d4 <xTaskIncrementTick+0x160>)
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	f000 faca 	bl	8004b70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045dc:	4b3e      	ldr	r3, [pc, #248]	; (80046d8 <xTaskIncrementTick+0x164>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d34e      	bcc.n	8004684 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045e6:	4b39      	ldr	r3, [pc, #228]	; (80046cc <xTaskIncrementTick+0x158>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <xTaskIncrementTick+0x80>
 80045f0:	2301      	movs	r3, #1
 80045f2:	e000      	b.n	80045f6 <xTaskIncrementTick+0x82>
 80045f4:	2300      	movs	r3, #0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d004      	beq.n	8004604 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045fa:	4b37      	ldr	r3, [pc, #220]	; (80046d8 <xTaskIncrementTick+0x164>)
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	601a      	str	r2, [r3, #0]
					break;
 8004602:	e03f      	b.n	8004684 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004604:	4b31      	ldr	r3, [pc, #196]	; (80046cc <xTaskIncrementTick+0x158>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	d203      	bcs.n	8004624 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800461c:	4a2e      	ldr	r2, [pc, #184]	; (80046d8 <xTaskIncrementTick+0x164>)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6013      	str	r3, [r2, #0]
						break;
 8004622:	e02f      	b.n	8004684 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3304      	adds	r3, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe ffbf 	bl	80035ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	3318      	adds	r3, #24
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe ffb6 	bl	80035ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <xTaskIncrementTick+0x168>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d903      	bls.n	8004654 <xTaskIncrementTick+0xe0>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	4a22      	ldr	r2, [pc, #136]	; (80046dc <xTaskIncrementTick+0x168>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004658:	4613      	mov	r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <xTaskIncrementTick+0x16c>)
 8004662:	441a      	add	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	3304      	adds	r3, #4
 8004668:	4619      	mov	r1, r3
 800466a:	4610      	mov	r0, r2
 800466c:	f7fe ff41 	bl	80034f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004674:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <xTaskIncrementTick+0x170>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	429a      	cmp	r2, r3
 800467c:	d3b3      	bcc.n	80045e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800467e:	2301      	movs	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	e7b0      	b.n	80045e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004684:	4b17      	ldr	r3, [pc, #92]	; (80046e4 <xTaskIncrementTick+0x170>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	4915      	ldr	r1, [pc, #84]	; (80046e0 <xTaskIncrementTick+0x16c>)
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d907      	bls.n	80046ac <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e004      	b.n	80046ac <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80046a2:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <xTaskIncrementTick+0x174>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3301      	adds	r3, #1
 80046a8:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <xTaskIncrementTick+0x174>)
 80046aa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <xTaskIncrementTick+0x178>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80046b8:	697b      	ldr	r3, [r7, #20]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000c50 	.word	0x20000c50
 80046c8:	20000c2c 	.word	0x20000c2c
 80046cc:	20000be0 	.word	0x20000be0
 80046d0:	20000be4 	.word	0x20000be4
 80046d4:	20000c40 	.word	0x20000c40
 80046d8:	20000c48 	.word	0x20000c48
 80046dc:	20000c30 	.word	0x20000c30
 80046e0:	20000758 	.word	0x20000758
 80046e4:	20000754 	.word	0x20000754
 80046e8:	20000c38 	.word	0x20000c38
 80046ec:	20000c3c 	.word	0x20000c3c

080046f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <vTaskSwitchContext+0xa4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <vTaskSwitchContext+0xa8>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004704:	e040      	b.n	8004788 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <vTaskSwitchContext+0xa8>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800470c:	4b23      	ldr	r3, [pc, #140]	; (800479c <vTaskSwitchContext+0xac>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e00f      	b.n	8004734 <vTaskSwitchContext+0x44>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <vTaskSwitchContext+0x3e>
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e7fe      	b.n	800472c <vTaskSwitchContext+0x3c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3b01      	subs	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	491a      	ldr	r1, [pc, #104]	; (80047a0 <vTaskSwitchContext+0xb0>)
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0e5      	beq.n	8004714 <vTaskSwitchContext+0x24>
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <vTaskSwitchContext+0xb0>)
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	3308      	adds	r3, #8
 800476a:	429a      	cmp	r2, r3
 800476c:	d104      	bne.n	8004778 <vTaskSwitchContext+0x88>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	605a      	str	r2, [r3, #4]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <vTaskSwitchContext+0xb4>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	4a06      	ldr	r2, [pc, #24]	; (800479c <vTaskSwitchContext+0xac>)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6013      	str	r3, [r2, #0]
}
 8004788:	bf00      	nop
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	20000c50 	.word	0x20000c50
 8004798:	20000c3c 	.word	0x20000c3c
 800479c:	20000c30 	.word	0x20000c30
 80047a0:	20000758 	.word	0x20000758
 80047a4:	20000754 	.word	0x20000754

080047a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d109      	bne.n	80047cc <vTaskPlaceOnEventList+0x24>
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e7fe      	b.n	80047ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047cc:	4b07      	ldr	r3, [pc, #28]	; (80047ec <vTaskPlaceOnEventList+0x44>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3318      	adds	r3, #24
 80047d2:	4619      	mov	r1, r3
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7fe feb0 	bl	800353a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80047da:	2101      	movs	r1, #1
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f000 fa77 	bl	8004cd0 <prvAddCurrentTaskToDelayedList>
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000754 	.word	0x20000754

080047f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <vTaskPlaceOnEventListRestricted+0x26>
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	617b      	str	r3, [r7, #20]
 8004814:	e7fe      	b.n	8004814 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004816:	4b0a      	ldr	r3, [pc, #40]	; (8004840 <vTaskPlaceOnEventListRestricted+0x50>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3318      	adds	r3, #24
 800481c:	4619      	mov	r1, r3
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7fe fe67 	bl	80034f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d002      	beq.n	8004830 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800482a:	f04f 33ff 	mov.w	r3, #4294967295
 800482e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	68b8      	ldr	r0, [r7, #8]
 8004834:	f000 fa4c 	bl	8004cd0 <prvAddCurrentTaskToDelayedList>
	}
 8004838:	bf00      	nop
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000754 	.word	0x20000754

08004844 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d109      	bne.n	800486e <xTaskRemoveFromEventList+0x2a>
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e7fe      	b.n	800486c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	3318      	adds	r3, #24
 8004872:	4618      	mov	r0, r3
 8004874:	f7fe fe9a 	bl	80035ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <xTaskRemoveFromEventList+0xac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d11d      	bne.n	80048bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fe91 	bl	80035ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <xTaskRemoveFromEventList+0xb0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d903      	bls.n	800489e <xTaskRemoveFromEventList+0x5a>
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	4a16      	ldr	r2, [pc, #88]	; (80048f4 <xTaskRemoveFromEventList+0xb0>)
 800489c:	6013      	str	r3, [r2, #0]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	4613      	mov	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <xTaskRemoveFromEventList+0xb4>)
 80048ac:	441a      	add	r2, r3
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4619      	mov	r1, r3
 80048b4:	4610      	mov	r0, r2
 80048b6:	f7fe fe1c 	bl	80034f2 <vListInsertEnd>
 80048ba:	e005      	b.n	80048c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	3318      	adds	r3, #24
 80048c0:	4619      	mov	r1, r3
 80048c2:	480e      	ldr	r0, [pc, #56]	; (80048fc <xTaskRemoveFromEventList+0xb8>)
 80048c4:	f7fe fe15 	bl	80034f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <xTaskRemoveFromEventList+0xbc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d905      	bls.n	80048e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048da:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <xTaskRemoveFromEventList+0xc0>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e001      	b.n	80048e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048e6:	697b      	ldr	r3, [r7, #20]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20000c50 	.word	0x20000c50
 80048f4:	20000c30 	.word	0x20000c30
 80048f8:	20000758 	.word	0x20000758
 80048fc:	20000be8 	.word	0x20000be8
 8004900:	20000754 	.word	0x20000754
 8004904:	20000c3c 	.word	0x20000c3c

08004908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004910:	4b06      	ldr	r3, [pc, #24]	; (800492c <vTaskInternalSetTimeOutState+0x24>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <vTaskInternalSetTimeOutState+0x28>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	605a      	str	r2, [r3, #4]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	20000c40 	.word	0x20000c40
 8004930:	20000c2c 	.word	0x20000c2c

08004934 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d109      	bne.n	8004958 <xTaskCheckForTimeOut+0x24>
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	e7fe      	b.n	8004956 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <xTaskCheckForTimeOut+0x3e>
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e7fe      	b.n	8004970 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004972:	f000 fe33 	bl	80055dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <xTaskCheckForTimeOut+0xb8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498e:	d102      	bne.n	8004996 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
 8004994:	e023      	b.n	80049de <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <xTaskCheckForTimeOut+0xbc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d007      	beq.n	80049b2 <xTaskCheckForTimeOut+0x7e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d302      	bcc.n	80049b2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
 80049b0:	e015      	b.n	80049de <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d20b      	bcs.n	80049d4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f7ff ff9d 	bl	8004908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e004      	b.n	80049de <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f000 fe2b 	bl	8005638 <vPortExitCritical>

	return xReturn;
 80049e2:	69fb      	ldr	r3, [r7, #28]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000c2c 	.word	0x20000c2c
 80049f0:	20000c40 	.word	0x20000c40

080049f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049f8:	4b03      	ldr	r3, [pc, #12]	; (8004a08 <vTaskMissedYield+0x14>)
 80049fa:	2201      	movs	r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	20000c3c 	.word	0x20000c3c

08004a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a14:	f000 f852 	bl	8004abc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <prvIdleTask+0x28>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d9f9      	bls.n	8004a14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a20:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <prvIdleTask+0x2c>)
 8004a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a30:	e7f0      	b.n	8004a14 <prvIdleTask+0x8>
 8004a32:	bf00      	nop
 8004a34:	20000758 	.word	0x20000758
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a42:	2300      	movs	r3, #0
 8004a44:	607b      	str	r3, [r7, #4]
 8004a46:	e00c      	b.n	8004a62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4a12      	ldr	r2, [pc, #72]	; (8004a9c <prvInitialiseTaskLists+0x60>)
 8004a54:	4413      	add	r3, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe fd1e 	bl	8003498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	607b      	str	r3, [r7, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b37      	cmp	r3, #55	; 0x37
 8004a66:	d9ef      	bls.n	8004a48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a68:	480d      	ldr	r0, [pc, #52]	; (8004aa0 <prvInitialiseTaskLists+0x64>)
 8004a6a:	f7fe fd15 	bl	8003498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a6e:	480d      	ldr	r0, [pc, #52]	; (8004aa4 <prvInitialiseTaskLists+0x68>)
 8004a70:	f7fe fd12 	bl	8003498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a74:	480c      	ldr	r0, [pc, #48]	; (8004aa8 <prvInitialiseTaskLists+0x6c>)
 8004a76:	f7fe fd0f 	bl	8003498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a7a:	480c      	ldr	r0, [pc, #48]	; (8004aac <prvInitialiseTaskLists+0x70>)
 8004a7c:	f7fe fd0c 	bl	8003498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a80:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <prvInitialiseTaskLists+0x74>)
 8004a82:	f7fe fd09 	bl	8003498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <prvInitialiseTaskLists+0x78>)
 8004a88:	4a05      	ldr	r2, [pc, #20]	; (8004aa0 <prvInitialiseTaskLists+0x64>)
 8004a8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <prvInitialiseTaskLists+0x7c>)
 8004a8e:	4a05      	ldr	r2, [pc, #20]	; (8004aa4 <prvInitialiseTaskLists+0x68>)
 8004a90:	601a      	str	r2, [r3, #0]
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	20000758 	.word	0x20000758
 8004aa0:	20000bb8 	.word	0x20000bb8
 8004aa4:	20000bcc 	.word	0x20000bcc
 8004aa8:	20000be8 	.word	0x20000be8
 8004aac:	20000bfc 	.word	0x20000bfc
 8004ab0:	20000c14 	.word	0x20000c14
 8004ab4:	20000be0 	.word	0x20000be0
 8004ab8:	20000be4 	.word	0x20000be4

08004abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ac2:	e019      	b.n	8004af8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ac4:	f000 fd8a 	bl	80055dc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <prvCheckTasksWaitingTermination+0x4c>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe fd69 	bl	80035ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ada:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <prvCheckTasksWaitingTermination+0x50>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <prvCheckTasksWaitingTermination+0x50>)
 8004ae2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ae4:	4b0a      	ldr	r3, [pc, #40]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004aec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004aee:	f000 fda3 	bl	8005638 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f80e 	bl	8004b14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af8:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <prvCheckTasksWaitingTermination+0x54>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e1      	bne.n	8004ac4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000bfc 	.word	0x20000bfc
 8004b0c:	20000c28 	.word	0x20000c28
 8004b10:	20000c10 	.word	0x20000c10

08004b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d108      	bne.n	8004b38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 ff32 	bl	8005994 <vPortFree>
				vPortFree( pxTCB );
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 ff2f 	bl	8005994 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b36:	e017      	b.n	8004b68 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d103      	bne.n	8004b4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 ff26 	bl	8005994 <vPortFree>
	}
 8004b48:	e00e      	b.n	8004b68 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d009      	beq.n	8004b68 <prvDeleteTCB+0x54>
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e7fe      	b.n	8004b66 <prvDeleteTCB+0x52>
	}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b76:	4b0f      	ldr	r3, [pc, #60]	; (8004bb4 <prvResetNextTaskUnblockTime+0x44>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <prvResetNextTaskUnblockTime+0x14>
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <prvResetNextTaskUnblockTime+0x16>
 8004b84:	2300      	movs	r3, #0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <prvResetNextTaskUnblockTime+0x48>)
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b92:	e008      	b.n	8004ba6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b94:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <prvResetNextTaskUnblockTime+0x44>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <prvResetNextTaskUnblockTime+0x48>)
 8004ba4:	6013      	str	r3, [r2, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	370c      	adds	r7, #12
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000be0 	.word	0x20000be0
 8004bb8:	20000c48 	.word	0x20000c48

08004bbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	; (8004bf0 <xTaskGetSchedulerState+0x34>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	e008      	b.n	8004be2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd0:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <xTaskGetSchedulerState+0x38>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	607b      	str	r3, [r7, #4]
 8004bdc:	e001      	b.n	8004be2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004be2:	687b      	ldr	r3, [r7, #4]
	}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	20000c34 	.word	0x20000c34
 8004bf4:	20000c50 	.word	0x20000c50

08004bf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d054      	beq.n	8004cb8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c0e:	4b2d      	ldr	r3, [pc, #180]	; (8004cc4 <xTaskPriorityDisinherit+0xcc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d009      	beq.n	8004c2c <xTaskPriorityDisinherit+0x34>
 8004c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e7fe      	b.n	8004c2a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <xTaskPriorityDisinherit+0x50>
 8004c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c38:	f383 8811 	msr	BASEPRI, r3
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	e7fe      	b.n	8004c46 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4c:	1e5a      	subs	r2, r3, #1
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d02c      	beq.n	8004cb8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d128      	bne.n	8004cb8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	3304      	adds	r3, #4
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fc9e 	bl	80035ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c88:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <xTaskPriorityDisinherit+0xd0>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d903      	bls.n	8004c98 <xTaskPriorityDisinherit+0xa0>
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	4a0c      	ldr	r2, [pc, #48]	; (8004cc8 <xTaskPriorityDisinherit+0xd0>)
 8004c96:	6013      	str	r3, [r2, #0]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4a09      	ldr	r2, [pc, #36]	; (8004ccc <xTaskPriorityDisinherit+0xd4>)
 8004ca6:	441a      	add	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f7fe fc1f 	bl	80034f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cb8:	697b      	ldr	r3, [r7, #20]
	}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000754 	.word	0x20000754
 8004cc8:	20000c30 	.word	0x20000c30
 8004ccc:	20000758 	.word	0x20000758

08004cd0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004cda:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <prvAddCurrentTaskToDelayedList+0x90>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3304      	adds	r3, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fc60 	bl	80035ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d10a      	bne.n	8004d0a <prvAddCurrentTaskToDelayedList+0x3a>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4819      	ldr	r0, [pc, #100]	; (8004d68 <prvAddCurrentTaskToDelayedList+0x98>)
 8004d04:	f7fe fbf5 	bl	80034f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d08:	e026      	b.n	8004d58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d209      	bcs.n	8004d36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fe fc03 	bl	800353a <vListInsert>
}
 8004d34:	e010      	b.n	8004d58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d36:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	; (8004d64 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fe fbf9 	bl	800353a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d48:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d202      	bcs.n	8004d58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d52:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000c2c 	.word	0x20000c2c
 8004d64:	20000754 	.word	0x20000754
 8004d68:	20000c14 	.word	0x20000c14
 8004d6c:	20000be4 	.word	0x20000be4
 8004d70:	20000be0 	.word	0x20000be0
 8004d74:	20000c48 	.word	0x20000c48

08004d78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004d82:	f000 fac3 	bl	800530c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <xTimerCreateTimerTask+0x80>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d021      	beq.n	8004dd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d96:	1d3a      	adds	r2, r7, #4
 8004d98:	f107 0108 	add.w	r1, r7, #8
 8004d9c:	f107 030c 	add.w	r3, r7, #12
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7fe fb5f 	bl	8003464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	9202      	str	r2, [sp, #8]
 8004dae:	9301      	str	r3, [sp, #4]
 8004db0:	2302      	movs	r3, #2
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2300      	movs	r3, #0
 8004db6:	460a      	mov	r2, r1
 8004db8:	4910      	ldr	r1, [pc, #64]	; (8004dfc <xTimerCreateTimerTask+0x84>)
 8004dba:	4811      	ldr	r0, [pc, #68]	; (8004e00 <xTimerCreateTimerTask+0x88>)
 8004dbc:	f7ff f8f4 	bl	8003fa8 <xTaskCreateStatic>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <xTimerCreateTimerTask+0x8c>)
 8004dc4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <xTimerCreateTimerTask+0x8c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d109      	bne.n	8004dec <xTimerCreateTimerTask+0x74>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	613b      	str	r3, [r7, #16]
 8004dea:	e7fe      	b.n	8004dea <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004dec:	697b      	ldr	r3, [r7, #20]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000c84 	.word	0x20000c84
 8004dfc:	08006478 	.word	0x08006478
 8004e00:	08004f21 	.word	0x08004f21
 8004e04:	20000c88 	.word	0x20000c88

08004e08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d109      	bne.n	8004e34 <xTimerGenericCommand+0x2c>
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	623b      	str	r3, [r7, #32]
 8004e32:	e7fe      	b.n	8004e32 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <xTimerGenericCommand+0x94>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02a      	beq.n	8004e92 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	dc18      	bgt.n	8004e80 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e4e:	f7ff feb5 	bl	8004bbc <xTaskGetSchedulerState>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d109      	bne.n	8004e6c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <xTimerGenericCommand+0x94>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	f107 0110 	add.w	r1, r7, #16
 8004e60:	2300      	movs	r3, #0
 8004e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e64:	f7fe fcca 	bl	80037fc <xQueueGenericSend>
 8004e68:	6278      	str	r0, [r7, #36]	; 0x24
 8004e6a:	e012      	b.n	8004e92 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <xTimerGenericCommand+0x94>)
 8004e6e:	6818      	ldr	r0, [r3, #0]
 8004e70:	f107 0110 	add.w	r1, r7, #16
 8004e74:	2300      	movs	r3, #0
 8004e76:	2200      	movs	r2, #0
 8004e78:	f7fe fcc0 	bl	80037fc <xQueueGenericSend>
 8004e7c:	6278      	str	r0, [r7, #36]	; 0x24
 8004e7e:	e008      	b.n	8004e92 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e80:	4b06      	ldr	r3, [pc, #24]	; (8004e9c <xTimerGenericCommand+0x94>)
 8004e82:	6818      	ldr	r0, [r3, #0]
 8004e84:	f107 0110 	add.w	r1, r7, #16
 8004e88:	2300      	movs	r3, #0
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	f7fe fdb0 	bl	80039f0 <xQueueGenericSendFromISR>
 8004e90:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3728      	adds	r7, #40	; 0x28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000c84 	.word	0x20000c84

08004ea0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b088      	sub	sp, #32
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <prvProcessExpiredTimer+0x7c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3304      	adds	r3, #4
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fb77 	bl	80035ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d121      	bne.n	8004f0a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	18d1      	adds	r1, r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	6978      	ldr	r0, [r7, #20]
 8004ed4:	f000 f8c8 	bl	8005068 <prvInsertTimerInActiveList>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ede:	2300      	movs	r3, #0
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	6978      	ldr	r0, [r7, #20]
 8004eea:	f7ff ff8d 	bl	8004e08 <xTimerGenericCommand>
 8004eee:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <prvProcessExpiredTimer+0x6a>
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e7fe      	b.n	8004f08 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	6978      	ldr	r0, [r7, #20]
 8004f10:	4798      	blx	r3
}
 8004f12:	bf00      	nop
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000c7c 	.word	0x20000c7c

08004f20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f28:	f107 0308 	add.w	r3, r7, #8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f857 	bl	8004fe0 <prvGetNextExpireTime>
 8004f32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4619      	mov	r1, r3
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f803 	bl	8004f44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f3e:	f000 f8d5 	bl	80050ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f42:	e7f1      	b.n	8004f28 <prvTimerTask+0x8>

08004f44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f4e:	f7ff fa57 	bl	8004400 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f52:	f107 0308 	add.w	r3, r7, #8
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f866 	bl	8005028 <prvSampleTimeNow>
 8004f5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d130      	bne.n	8004fc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10a      	bne.n	8004f80 <prvProcessTimerOrBlockTask+0x3c>
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d806      	bhi.n	8004f80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f72:	f7ff fa53 	bl	800441c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ff91 	bl	8004ea0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f7e:	e024      	b.n	8004fca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <prvProcessTimerOrBlockTask+0x90>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f98:	4b0f      	ldr	r3, [pc, #60]	; (8004fd8 <prvProcessTimerOrBlockTask+0x94>)
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fe ffcb 	bl	8003f40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004faa:	f7ff fa37 	bl	800441c <xTaskResumeAll>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004fb4:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <prvProcessTimerOrBlockTask+0x98>)
 8004fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	f3bf 8f6f 	isb	sy
}
 8004fc4:	e001      	b.n	8004fca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004fc6:	f7ff fa29 	bl	800441c <xTaskResumeAll>
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	20000c80 	.word	0x20000c80
 8004fd8:	20000c84 	.word	0x20000c84
 8004fdc:	e000ed04 	.word	0xe000ed04

08004fe0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fe8:	4b0e      	ldr	r3, [pc, #56]	; (8005024 <prvGetNextExpireTime+0x44>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d105      	bne.n	8005012 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <prvGetNextExpireTime+0x44>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e001      	b.n	8005016 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005012:	2300      	movs	r3, #0
 8005014:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3714      	adds	r7, #20
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	20000c7c 	.word	0x20000c7c

08005028 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005030:	f7ff fa90 	bl	8004554 <xTaskGetTickCount>
 8005034:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005036:	4b0b      	ldr	r3, [pc, #44]	; (8005064 <prvSampleTimeNow+0x3c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	429a      	cmp	r2, r3
 800503e:	d205      	bcs.n	800504c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005040:	f000 f904 	bl	800524c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e002      	b.n	8005052 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005052:	4a04      	ldr	r2, [pc, #16]	; (8005064 <prvSampleTimeNow+0x3c>)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005058:	68fb      	ldr	r3, [r7, #12]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000c8c 	.word	0x20000c8c

08005068 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	429a      	cmp	r2, r3
 800508c:	d812      	bhi.n	80050b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	1ad2      	subs	r2, r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800509c:	2301      	movs	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e01b      	b.n	80050da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <prvInsertTimerInActiveList+0x7c>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3304      	adds	r3, #4
 80050aa:	4619      	mov	r1, r3
 80050ac:	4610      	mov	r0, r2
 80050ae:	f7fe fa44 	bl	800353a <vListInsert>
 80050b2:	e012      	b.n	80050da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d206      	bcs.n	80050ca <prvInsertTimerInActiveList+0x62>
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d302      	bcc.n	80050ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	e007      	b.n	80050da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <prvInsertTimerInActiveList+0x80>)
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3304      	adds	r3, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4610      	mov	r0, r2
 80050d6:	f7fe fa30 	bl	800353a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050da:	697b      	ldr	r3, [r7, #20]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3718      	adds	r7, #24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	20000c80 	.word	0x20000c80
 80050e8:	20000c7c 	.word	0x20000c7c

080050ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08e      	sub	sp, #56	; 0x38
 80050f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050f2:	e099      	b.n	8005228 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	da17      	bge.n	800512a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050fa:	1d3b      	adds	r3, r7, #4
 80050fc:	3304      	adds	r3, #4
 80050fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <prvProcessReceivedCommands+0x2e>
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	61fb      	str	r3, [r7, #28]
 8005118:	e7fe      	b.n	8005118 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005120:	6850      	ldr	r0, [r2, #4]
 8005122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005124:	6892      	ldr	r2, [r2, #8]
 8005126:	4611      	mov	r1, r2
 8005128:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	db7a      	blt.n	8005226 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513e:	3304      	adds	r3, #4
 8005140:	4618      	mov	r0, r3
 8005142:	f7fe fa33 	bl	80035ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005146:	463b      	mov	r3, r7
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff ff6d 	bl	8005028 <prvSampleTimeNow>
 800514e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b09      	cmp	r3, #9
 8005154:	d868      	bhi.n	8005228 <prvProcessReceivedCommands+0x13c>
 8005156:	a201      	add	r2, pc, #4	; (adr r2, 800515c <prvProcessReceivedCommands+0x70>)
 8005158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515c:	08005185 	.word	0x08005185
 8005160:	08005185 	.word	0x08005185
 8005164:	08005185 	.word	0x08005185
 8005168:	08005229 	.word	0x08005229
 800516c:	080051df 	.word	0x080051df
 8005170:	08005215 	.word	0x08005215
 8005174:	08005185 	.word	0x08005185
 8005178:	08005185 	.word	0x08005185
 800517c:	08005229 	.word	0x08005229
 8005180:	080051df 	.word	0x080051df
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	18d1      	adds	r1, r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005192:	f7ff ff69 	bl	8005068 <prvInsertTimerInActiveList>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d045      	beq.n	8005228 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d13d      	bne.n	8005228 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	441a      	add	r2, r3
 80051b4:	2300      	movs	r3, #0
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	2300      	movs	r3, #0
 80051ba:	2100      	movs	r1, #0
 80051bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051be:	f7ff fe23 	bl	8004e08 <xTimerGenericCommand>
 80051c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051c4:	6a3b      	ldr	r3, [r7, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d12e      	bne.n	8005228 <prvProcessReceivedCommands+0x13c>
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e7fe      	b.n	80051dc <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d109      	bne.n	8005200 <prvProcessReceivedCommands+0x114>
 80051ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f0:	f383 8811 	msr	BASEPRI, r3
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	f3bf 8f4f 	dsb	sy
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e7fe      	b.n	80051fe <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	18d1      	adds	r1, r2, r3
 8005208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800520c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800520e:	f7ff ff2b 	bl	8005068 <prvInsertTimerInActiveList>
					break;
 8005212:	e009      	b.n	8005228 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005216:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800521e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005220:	f000 fbb8 	bl	8005994 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005224:	e000      	b.n	8005228 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005226:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005228:	4b07      	ldr	r3, [pc, #28]	; (8005248 <prvProcessReceivedCommands+0x15c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	1d39      	adds	r1, r7, #4
 800522e:	2200      	movs	r2, #0
 8005230:	4618      	mov	r0, r3
 8005232:	f7fe fc71 	bl	8003b18 <xQueueReceive>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af5b 	bne.w	80050f4 <prvProcessReceivedCommands+0x8>
	}
}
 800523e:	bf00      	nop
 8005240:	3730      	adds	r7, #48	; 0x30
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000c84 	.word	0x20000c84

0800524c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005252:	e044      	b.n	80052de <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005254:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <prvSwitchTimerLists+0xb8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800525e:	4b29      	ldr	r3, [pc, #164]	; (8005304 <prvSwitchTimerLists+0xb8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3304      	adds	r3, #4
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe f99d 	bl	80035ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d12d      	bne.n	80052de <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4413      	add	r3, r2
 800528a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	429a      	cmp	r2, r3
 8005292:	d90e      	bls.n	80052b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <prvSwitchTimerLists+0xb8>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3304      	adds	r3, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fe f945 	bl	800353a <vListInsert>
 80052b0:	e015      	b.n	80052de <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052b2:	2300      	movs	r3, #0
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	2100      	movs	r1, #0
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff fda3 	bl	8004e08 <xTimerGenericCommand>
 80052c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <prvSwitchTimerLists+0x92>
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	e7fe      	b.n	80052dc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <prvSwitchTimerLists+0xb8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1b5      	bne.n	8005254 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052e8:	4b06      	ldr	r3, [pc, #24]	; (8005304 <prvSwitchTimerLists+0xb8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <prvSwitchTimerLists+0xbc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a04      	ldr	r2, [pc, #16]	; (8005304 <prvSwitchTimerLists+0xb8>)
 80052f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052f6:	4a04      	ldr	r2, [pc, #16]	; (8005308 <prvSwitchTimerLists+0xbc>)
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	6013      	str	r3, [r2, #0]
}
 80052fc:	bf00      	nop
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	20000c7c 	.word	0x20000c7c
 8005308:	20000c80 	.word	0x20000c80

0800530c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005312:	f000 f963 	bl	80055dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005316:	4b15      	ldr	r3, [pc, #84]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d120      	bne.n	8005360 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800531e:	4814      	ldr	r0, [pc, #80]	; (8005370 <prvCheckForValidListAndQueue+0x64>)
 8005320:	f7fe f8ba 	bl	8003498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005324:	4813      	ldr	r0, [pc, #76]	; (8005374 <prvCheckForValidListAndQueue+0x68>)
 8005326:	f7fe f8b7 	bl	8003498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800532a:	4b13      	ldr	r3, [pc, #76]	; (8005378 <prvCheckForValidListAndQueue+0x6c>)
 800532c:	4a10      	ldr	r2, [pc, #64]	; (8005370 <prvCheckForValidListAndQueue+0x64>)
 800532e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005330:	4b12      	ldr	r3, [pc, #72]	; (800537c <prvCheckForValidListAndQueue+0x70>)
 8005332:	4a10      	ldr	r2, [pc, #64]	; (8005374 <prvCheckForValidListAndQueue+0x68>)
 8005334:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005336:	2300      	movs	r3, #0
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	4b11      	ldr	r3, [pc, #68]	; (8005380 <prvCheckForValidListAndQueue+0x74>)
 800533c:	4a11      	ldr	r2, [pc, #68]	; (8005384 <prvCheckForValidListAndQueue+0x78>)
 800533e:	2110      	movs	r1, #16
 8005340:	200a      	movs	r0, #10
 8005342:	f7fe f9c5 	bl	80036d0 <xQueueGenericCreateStatic>
 8005346:	4602      	mov	r2, r0
 8005348:	4b08      	ldr	r3, [pc, #32]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 800534a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <prvCheckForValidListAndQueue+0x60>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	490b      	ldr	r1, [pc, #44]	; (8005388 <prvCheckForValidListAndQueue+0x7c>)
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fdc8 	bl	8003ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005360:	f000 f96a 	bl	8005638 <vPortExitCritical>
}
 8005364:	bf00      	nop
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	20000c84 	.word	0x20000c84
 8005370:	20000c54 	.word	0x20000c54
 8005374:	20000c68 	.word	0x20000c68
 8005378:	20000c7c 	.word	0x20000c7c
 800537c:	20000c80 	.word	0x20000c80
 8005380:	20000d30 	.word	0x20000d30
 8005384:	20000c90 	.word	0x20000c90
 8005388:	08006480 	.word	0x08006480

0800538c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	3b04      	subs	r3, #4
 800539c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f023 0201 	bic.w	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3b04      	subs	r3, #4
 80053ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053bc:	4a0c      	ldr	r2, [pc, #48]	; (80053f0 <pxPortInitialiseStack+0x64>)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3b14      	subs	r3, #20
 80053c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3b04      	subs	r3, #4
 80053d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f06f 0202 	mvn.w	r2, #2
 80053da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3b20      	subs	r3, #32
 80053e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	080053f5 	.word	0x080053f5

080053f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fe:	4b11      	ldr	r3, [pc, #68]	; (8005444 <prvTaskExitError+0x50>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005406:	d009      	beq.n	800541c <prvTaskExitError+0x28>
 8005408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540c:	f383 8811 	msr	BASEPRI, r3
 8005410:	f3bf 8f6f 	isb	sy
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e7fe      	b.n	800541a <prvTaskExitError+0x26>
 800541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800542e:	bf00      	nop
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0fc      	beq.n	8005430 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c
	...

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005478:	4808      	ldr	r0, [pc, #32]	; (800549c <prvPortStartFirstTask+0x24>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8814 	msr	CONTROL, r0
 800548a:	b662      	cpsie	i
 800548c:	b661      	cpsie	f
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	df00      	svc	0
 8005498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800549a:	bf00      	nop
 800549c:	e000ed08 	.word	0xe000ed08

080054a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054a6:	4b44      	ldr	r3, [pc, #272]	; (80055b8 <xPortStartScheduler+0x118>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a44      	ldr	r2, [pc, #272]	; (80055bc <xPortStartScheduler+0x11c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <xPortStartScheduler+0x24>
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	e7fe      	b.n	80054c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054c4:	4b3c      	ldr	r3, [pc, #240]	; (80055b8 <xPortStartScheduler+0x118>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3d      	ldr	r2, [pc, #244]	; (80055c0 <xPortStartScheduler+0x120>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d109      	bne.n	80054e2 <xPortStartScheduler+0x42>
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60fb      	str	r3, [r7, #12]
 80054e0:	e7fe      	b.n	80054e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054e2:	4b38      	ldr	r3, [pc, #224]	; (80055c4 <xPortStartScheduler+0x124>)
 80054e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	22ff      	movs	r2, #255	; 0xff
 80054f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054fc:	78fb      	ldrb	r3, [r7, #3]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b30      	ldr	r3, [pc, #192]	; (80055c8 <xPortStartScheduler+0x128>)
 8005508:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800550a:	4b30      	ldr	r3, [pc, #192]	; (80055cc <xPortStartScheduler+0x12c>)
 800550c:	2207      	movs	r2, #7
 800550e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005510:	e009      	b.n	8005526 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005512:	4b2e      	ldr	r3, [pc, #184]	; (80055cc <xPortStartScheduler+0x12c>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3b01      	subs	r3, #1
 8005518:	4a2c      	ldr	r2, [pc, #176]	; (80055cc <xPortStartScheduler+0x12c>)
 800551a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	005b      	lsls	r3, r3, #1
 8005522:	b2db      	uxtb	r3, r3
 8005524:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d0ef      	beq.n	8005512 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <xPortStartScheduler+0x12c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1c3 0307 	rsb	r3, r3, #7
 800553a:	2b04      	cmp	r3, #4
 800553c:	d009      	beq.n	8005552 <xPortStartScheduler+0xb2>
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	e7fe      	b.n	8005550 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005552:	4b1e      	ldr	r3, [pc, #120]	; (80055cc <xPortStartScheduler+0x12c>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	4a1c      	ldr	r2, [pc, #112]	; (80055cc <xPortStartScheduler+0x12c>)
 800555a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800555c:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <xPortStartScheduler+0x12c>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005564:	4a19      	ldr	r2, [pc, #100]	; (80055cc <xPortStartScheduler+0x12c>)
 8005566:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005570:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <xPortStartScheduler+0x130>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a16      	ldr	r2, [pc, #88]	; (80055d0 <xPortStartScheduler+0x130>)
 8005576:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800557a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800557c:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <xPortStartScheduler+0x130>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a13      	ldr	r2, [pc, #76]	; (80055d0 <xPortStartScheduler+0x130>)
 8005582:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005586:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005588:	f000 f8d6 	bl	8005738 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <xPortStartScheduler+0x134>)
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005592:	f000 f8f5 	bl	8005780 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005596:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <xPortStartScheduler+0x138>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0f      	ldr	r2, [pc, #60]	; (80055d8 <xPortStartScheduler+0x138>)
 800559c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80055a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055a2:	f7ff ff69 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055a6:	f7ff f8a3 	bl	80046f0 <vTaskSwitchContext>
	prvTaskExitError();
 80055aa:	f7ff ff23 	bl	80053f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	e000ed00 	.word	0xe000ed00
 80055bc:	410fc271 	.word	0x410fc271
 80055c0:	410fc270 	.word	0x410fc270
 80055c4:	e000e400 	.word	0xe000e400
 80055c8:	20000d80 	.word	0x20000d80
 80055cc:	20000d84 	.word	0x20000d84
 80055d0:	e000ed20 	.word	0xe000ed20
 80055d4:	2000000c 	.word	0x2000000c
 80055d8:	e000ef34 	.word	0xe000ef34

080055dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <vPortEnterCritical+0x54>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	4a0d      	ldr	r2, [pc, #52]	; (8005630 <vPortEnterCritical+0x54>)
 80055fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <vPortEnterCritical+0x54>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d10e      	bne.n	8005624 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005606:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <vPortEnterCritical+0x58>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <vPortEnterCritical+0x48>
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	e7fe      	b.n	8005622 <vPortEnterCritical+0x46>
	}
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	2000000c 	.word	0x2000000c
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800563e:	4b11      	ldr	r3, [pc, #68]	; (8005684 <vPortExitCritical+0x4c>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <vPortExitCritical+0x22>
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	e7fe      	b.n	8005658 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <vPortExitCritical+0x4c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3b01      	subs	r3, #1
 8005660:	4a08      	ldr	r2, [pc, #32]	; (8005684 <vPortExitCritical+0x4c>)
 8005662:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005664:	4b07      	ldr	r3, [pc, #28]	; (8005684 <vPortExitCritical+0x4c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <vPortExitCritical+0x3e>
 800566c:	2300      	movs	r3, #0
 800566e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	2000000c 	.word	0x2000000c
	...

08005690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005690:	f3ef 8009 	mrs	r0, PSP
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <pxCurrentTCBConst>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	f01e 0f10 	tst.w	lr, #16
 80056a0:	bf08      	it	eq
 80056a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	6010      	str	r0, [r2, #0]
 80056ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056b4:	f380 8811 	msr	BASEPRI, r0
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f7ff f816 	bl	80046f0 <vTaskSwitchContext>
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f380 8811 	msr	BASEPRI, r0
 80056cc:	bc09      	pop	{r0, r3}
 80056ce:	6819      	ldr	r1, [r3, #0]
 80056d0:	6808      	ldr	r0, [r1, #0]
 80056d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d6:	f01e 0f10 	tst.w	lr, #16
 80056da:	bf08      	it	eq
 80056dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056e0:	f380 8809 	msr	PSP, r0
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst>:
 80056f0:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005710:	f7fe ff30 	bl	8004574 <xTaskIncrementTick>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800571a:	4b06      	ldr	r3, [pc, #24]	; (8005734 <SysTick_Handler+0x3c>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	2300      	movs	r3, #0
 8005724:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	e000ed04 	.word	0xe000ed04

08005738 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800573c:	4b0b      	ldr	r3, [pc, #44]	; (800576c <vPortSetupTimerInterrupt+0x34>)
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005742:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <vPortSetupTimerInterrupt+0x38>)
 8005744:	2200      	movs	r2, #0
 8005746:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <vPortSetupTimerInterrupt+0x3c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a0a      	ldr	r2, [pc, #40]	; (8005778 <vPortSetupTimerInterrupt+0x40>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	099b      	lsrs	r3, r3, #6
 8005754:	4a09      	ldr	r2, [pc, #36]	; (800577c <vPortSetupTimerInterrupt+0x44>)
 8005756:	3b01      	subs	r3, #1
 8005758:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800575a:	4b04      	ldr	r3, [pc, #16]	; (800576c <vPortSetupTimerInterrupt+0x34>)
 800575c:	2207      	movs	r2, #7
 800575e:	601a      	str	r2, [r3, #0]
}
 8005760:	bf00      	nop
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	e000e010 	.word	0xe000e010
 8005770:	e000e018 	.word	0xe000e018
 8005774:	20000000 	.word	0x20000000
 8005778:	10624dd3 	.word	0x10624dd3
 800577c:	e000e014 	.word	0xe000e014

08005780 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005780:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005790 <vPortEnableVFP+0x10>
 8005784:	6801      	ldr	r1, [r0, #0]
 8005786:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800578a:	6001      	str	r1, [r0, #0]
 800578c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800578e:	bf00      	nop
 8005790:	e000ed88 	.word	0xe000ed88

08005794 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800579a:	f3ef 8305 	mrs	r3, IPSR
 800579e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d913      	bls.n	80057ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057a6:	4a16      	ldr	r2, [pc, #88]	; (8005800 <vPortValidateInterruptPriority+0x6c>)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4413      	add	r3, r2
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <vPortValidateInterruptPriority+0x70>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	7afa      	ldrb	r2, [r7, #11]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d209      	bcs.n	80057ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	e7fe      	b.n	80057cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057ce:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <vPortValidateInterruptPriority+0x74>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057d6:	4b0d      	ldr	r3, [pc, #52]	; (800580c <vPortValidateInterruptPriority+0x78>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d909      	bls.n	80057f2 <vPortValidateInterruptPriority+0x5e>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	e7fe      	b.n	80057f0 <vPortValidateInterruptPriority+0x5c>
	}
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	e000e3f0 	.word	0xe000e3f0
 8005804:	20000d80 	.word	0x20000d80
 8005808:	e000ed0c 	.word	0xe000ed0c
 800580c:	20000d84 	.word	0x20000d84

08005810 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800581c:	f7fe fdf0 	bl	8004400 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005820:	4b57      	ldr	r3, [pc, #348]	; (8005980 <pvPortMalloc+0x170>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005828:	f000 f90c 	bl	8005a44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800582c:	4b55      	ldr	r3, [pc, #340]	; (8005984 <pvPortMalloc+0x174>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	f040 808c 	bne.w	8005952 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01c      	beq.n	800587a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005840:	2208      	movs	r2, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	2b00      	cmp	r3, #0
 8005850:	d013      	beq.n	800587a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f023 0307 	bic.w	r3, r3, #7
 8005858:	3308      	adds	r3, #8
 800585a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f003 0307 	and.w	r3, r3, #7
 8005862:	2b00      	cmp	r3, #0
 8005864:	d009      	beq.n	800587a <pvPortMalloc+0x6a>
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e7fe      	b.n	8005878 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d068      	beq.n	8005952 <pvPortMalloc+0x142>
 8005880:	4b41      	ldr	r3, [pc, #260]	; (8005988 <pvPortMalloc+0x178>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d863      	bhi.n	8005952 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800588a:	4b40      	ldr	r3, [pc, #256]	; (800598c <pvPortMalloc+0x17c>)
 800588c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800588e:	4b3f      	ldr	r3, [pc, #252]	; (800598c <pvPortMalloc+0x17c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005894:	e004      	b.n	80058a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800589a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d903      	bls.n	80058b2 <pvPortMalloc+0xa2>
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1f1      	bne.n	8005896 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058b2:	4b33      	ldr	r3, [pc, #204]	; (8005980 <pvPortMalloc+0x170>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d04a      	beq.n	8005952 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2208      	movs	r2, #8
 80058c2:	4413      	add	r3, r2
 80058c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	1ad2      	subs	r2, r2, r3
 80058d6:	2308      	movs	r3, #8
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	429a      	cmp	r2, r3
 80058dc:	d91e      	bls.n	800591c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4413      	add	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	f003 0307 	and.w	r3, r3, #7
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d009      	beq.n	8005904 <pvPortMalloc+0xf4>
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	e7fe      	b.n	8005902 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	685a      	ldr	r2, [r3, #4]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	1ad2      	subs	r2, r2, r3
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005916:	69b8      	ldr	r0, [r7, #24]
 8005918:	f000 f8f6 	bl	8005b08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800591c:	4b1a      	ldr	r3, [pc, #104]	; (8005988 <pvPortMalloc+0x178>)
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	4a18      	ldr	r2, [pc, #96]	; (8005988 <pvPortMalloc+0x178>)
 8005928:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800592a:	4b17      	ldr	r3, [pc, #92]	; (8005988 <pvPortMalloc+0x178>)
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4b18      	ldr	r3, [pc, #96]	; (8005990 <pvPortMalloc+0x180>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d203      	bcs.n	800593e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005936:	4b14      	ldr	r3, [pc, #80]	; (8005988 <pvPortMalloc+0x178>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a15      	ldr	r2, [pc, #84]	; (8005990 <pvPortMalloc+0x180>)
 800593c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	4b10      	ldr	r3, [pc, #64]	; (8005984 <pvPortMalloc+0x174>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	431a      	orrs	r2, r3
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005952:	f7fe fd63 	bl	800441c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f003 0307 	and.w	r3, r3, #7
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <pvPortMalloc+0x164>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	e7fe      	b.n	8005972 <pvPortMalloc+0x162>
	return pvReturn;
 8005974:	69fb      	ldr	r3, [r7, #28]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3728      	adds	r7, #40	; 0x28
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	20001990 	.word	0x20001990
 8005984:	2000199c 	.word	0x2000199c
 8005988:	20001994 	.word	0x20001994
 800598c:	20001988 	.word	0x20001988
 8005990:	20001998 	.word	0x20001998

08005994 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d046      	beq.n	8005a34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059a6:	2308      	movs	r3, #8
 80059a8:	425b      	negs	r3, r3
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	4413      	add	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <vPortFree+0xa8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4013      	ands	r3, r2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <vPortFree+0x42>
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e7fe      	b.n	80059d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d009      	beq.n	80059f2 <vPortFree+0x5e>
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	60bb      	str	r3, [r7, #8]
 80059f0:	e7fe      	b.n	80059f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <vPortFree+0xa8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d019      	beq.n	8005a34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d115      	bne.n	8005a34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <vPortFree+0xa8>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	43db      	mvns	r3, r3
 8005a12:	401a      	ands	r2, r3
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a18:	f7fe fcf2 	bl	8004400 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <vPortFree+0xac>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4413      	add	r3, r2
 8005a26:	4a06      	ldr	r2, [pc, #24]	; (8005a40 <vPortFree+0xac>)
 8005a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a2a:	6938      	ldr	r0, [r7, #16]
 8005a2c:	f000 f86c 	bl	8005b08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005a30:	f7fe fcf4 	bl	800441c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a34:	bf00      	nop
 8005a36:	3718      	adds	r7, #24
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2000199c 	.word	0x2000199c
 8005a40:	20001994 	.word	0x20001994

08005a44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005a4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a50:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <prvHeapInit+0xac>)
 8005a52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3307      	adds	r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f023 0307 	bic.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <prvHeapInit+0xac>)
 8005a74:	4413      	add	r3, r2
 8005a76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a7c:	4a1d      	ldr	r2, [pc, #116]	; (8005af4 <prvHeapInit+0xb0>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a82:	4b1c      	ldr	r3, [pc, #112]	; (8005af4 <prvHeapInit+0xb0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a90:	2208      	movs	r2, #8
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a15      	ldr	r2, [pc, #84]	; (8005af8 <prvHeapInit+0xb4>)
 8005aa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005aa6:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <prvHeapInit+0xb4>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <prvHeapInit+0xb4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	1ad2      	subs	r2, r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <prvHeapInit+0xb4>)
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4a0a      	ldr	r2, [pc, #40]	; (8005afc <prvHeapInit+0xb8>)
 8005ad2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	4a09      	ldr	r2, [pc, #36]	; (8005b00 <prvHeapInit+0xbc>)
 8005ada:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005adc:	4b09      	ldr	r3, [pc, #36]	; (8005b04 <prvHeapInit+0xc0>)
 8005ade:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ae2:	601a      	str	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr
 8005af0:	20000d88 	.word	0x20000d88
 8005af4:	20001988 	.word	0x20001988
 8005af8:	20001990 	.word	0x20001990
 8005afc:	20001998 	.word	0x20001998
 8005b00:	20001994 	.word	0x20001994
 8005b04:	2000199c 	.word	0x2000199c

08005b08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b10:	4b28      	ldr	r3, [pc, #160]	; (8005bb4 <prvInsertBlockIntoFreeList+0xac>)
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e002      	b.n	8005b1c <prvInsertBlockIntoFreeList+0x14>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d8f7      	bhi.n	8005b16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4413      	add	r3, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d108      	bne.n	8005b4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	441a      	add	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d118      	bne.n	8005b90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d00d      	beq.n	8005b86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	441a      	add	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e008      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b86:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	e003      	b.n	8005b98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d002      	beq.n	8005ba6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20001988 	.word	0x20001988
 8005bb8:	20001990 	.word	0x20001990

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000010 	.word	0x20000010

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	4e0d      	ldr	r6, [pc, #52]	; (8005c00 <__libc_init_array+0x38>)
 8005bcc:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bce:	1ba4      	subs	r4, r4, r6
 8005bd0:	10a4      	asrs	r4, r4, #2
 8005bd2:	2500      	movs	r5, #0
 8005bd4:	42a5      	cmp	r5, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	4e0b      	ldr	r6, [pc, #44]	; (8005c08 <__libc_init_array+0x40>)
 8005bda:	4c0c      	ldr	r4, [pc, #48]	; (8005c0c <__libc_init_array+0x44>)
 8005bdc:	f000 fc28 	bl	8006430 <_init>
 8005be0:	1ba4      	subs	r4, r4, r6
 8005be2:	10a4      	asrs	r4, r4, #2
 8005be4:	2500      	movs	r5, #0
 8005be6:	42a5      	cmp	r5, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bf0:	4798      	blx	r3
 8005bf2:	3501      	adds	r5, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bfa:	4798      	blx	r3
 8005bfc:	3501      	adds	r5, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	0800653c 	.word	0x0800653c
 8005c04:	0800653c 	.word	0x0800653c
 8005c08:	0800653c 	.word	0x0800653c
 8005c0c:	08006540 	.word	0x08006540

08005c10 <memcpy>:
 8005c10:	b510      	push	{r4, lr}
 8005c12:	1e43      	subs	r3, r0, #1
 8005c14:	440a      	add	r2, r1
 8005c16:	4291      	cmp	r1, r2
 8005c18:	d100      	bne.n	8005c1c <memcpy+0xc>
 8005c1a:	bd10      	pop	{r4, pc}
 8005c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c24:	e7f7      	b.n	8005c16 <memcpy+0x6>

08005c26 <memset>:
 8005c26:	4402      	add	r2, r0
 8005c28:	4603      	mov	r3, r0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d100      	bne.n	8005c30 <memset+0xa>
 8005c2e:	4770      	bx	lr
 8005c30:	f803 1b01 	strb.w	r1, [r3], #1
 8005c34:	e7f9      	b.n	8005c2a <memset+0x4>
	...

08005c38 <siprintf>:
 8005c38:	b40e      	push	{r1, r2, r3}
 8005c3a:	b500      	push	{lr}
 8005c3c:	b09c      	sub	sp, #112	; 0x70
 8005c3e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c40:	9002      	str	r0, [sp, #8]
 8005c42:	9006      	str	r0, [sp, #24]
 8005c44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c48:	4809      	ldr	r0, [pc, #36]	; (8005c70 <siprintf+0x38>)
 8005c4a:	9107      	str	r1, [sp, #28]
 8005c4c:	9104      	str	r1, [sp, #16]
 8005c4e:	4909      	ldr	r1, [pc, #36]	; (8005c74 <siprintf+0x3c>)
 8005c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c54:	9105      	str	r1, [sp, #20]
 8005c56:	6800      	ldr	r0, [r0, #0]
 8005c58:	9301      	str	r3, [sp, #4]
 8005c5a:	a902      	add	r1, sp, #8
 8005c5c:	f000 f866 	bl	8005d2c <_svfiprintf_r>
 8005c60:	9b02      	ldr	r3, [sp, #8]
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
 8005c66:	b01c      	add	sp, #112	; 0x70
 8005c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c6c:	b003      	add	sp, #12
 8005c6e:	4770      	bx	lr
 8005c70:	20000010 	.word	0x20000010
 8005c74:	ffff0208 	.word	0xffff0208

08005c78 <__ssputs_r>:
 8005c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c7c:	688e      	ldr	r6, [r1, #8]
 8005c7e:	429e      	cmp	r6, r3
 8005c80:	4682      	mov	sl, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	4690      	mov	r8, r2
 8005c86:	4699      	mov	r9, r3
 8005c88:	d837      	bhi.n	8005cfa <__ssputs_r+0x82>
 8005c8a:	898a      	ldrh	r2, [r1, #12]
 8005c8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c90:	d031      	beq.n	8005cf6 <__ssputs_r+0x7e>
 8005c92:	6825      	ldr	r5, [r4, #0]
 8005c94:	6909      	ldr	r1, [r1, #16]
 8005c96:	1a6f      	subs	r7, r5, r1
 8005c98:	6965      	ldr	r5, [r4, #20]
 8005c9a:	2302      	movs	r3, #2
 8005c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ca0:	fb95 f5f3 	sdiv	r5, r5, r3
 8005ca4:	f109 0301 	add.w	r3, r9, #1
 8005ca8:	443b      	add	r3, r7
 8005caa:	429d      	cmp	r5, r3
 8005cac:	bf38      	it	cc
 8005cae:	461d      	movcc	r5, r3
 8005cb0:	0553      	lsls	r3, r2, #21
 8005cb2:	d530      	bpl.n	8005d16 <__ssputs_r+0x9e>
 8005cb4:	4629      	mov	r1, r5
 8005cb6:	f000 fb21 	bl	80062fc <_malloc_r>
 8005cba:	4606      	mov	r6, r0
 8005cbc:	b950      	cbnz	r0, 8005cd4 <__ssputs_r+0x5c>
 8005cbe:	230c      	movs	r3, #12
 8005cc0:	f8ca 3000 	str.w	r3, [sl]
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cca:	81a3      	strh	r3, [r4, #12]
 8005ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	6921      	ldr	r1, [r4, #16]
 8005cd8:	f7ff ff9a 	bl	8005c10 <memcpy>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce6:	81a3      	strh	r3, [r4, #12]
 8005ce8:	6126      	str	r6, [r4, #16]
 8005cea:	6165      	str	r5, [r4, #20]
 8005cec:	443e      	add	r6, r7
 8005cee:	1bed      	subs	r5, r5, r7
 8005cf0:	6026      	str	r6, [r4, #0]
 8005cf2:	60a5      	str	r5, [r4, #8]
 8005cf4:	464e      	mov	r6, r9
 8005cf6:	454e      	cmp	r6, r9
 8005cf8:	d900      	bls.n	8005cfc <__ssputs_r+0x84>
 8005cfa:	464e      	mov	r6, r9
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4641      	mov	r1, r8
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	f000 fa93 	bl	800622c <memmove>
 8005d06:	68a3      	ldr	r3, [r4, #8]
 8005d08:	1b9b      	subs	r3, r3, r6
 8005d0a:	60a3      	str	r3, [r4, #8]
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	441e      	add	r6, r3
 8005d10:	6026      	str	r6, [r4, #0]
 8005d12:	2000      	movs	r0, #0
 8005d14:	e7dc      	b.n	8005cd0 <__ssputs_r+0x58>
 8005d16:	462a      	mov	r2, r5
 8005d18:	f000 fb4a 	bl	80063b0 <_realloc_r>
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d1e2      	bne.n	8005ce8 <__ssputs_r+0x70>
 8005d22:	6921      	ldr	r1, [r4, #16]
 8005d24:	4650      	mov	r0, sl
 8005d26:	f000 fa9b 	bl	8006260 <_free_r>
 8005d2a:	e7c8      	b.n	8005cbe <__ssputs_r+0x46>

08005d2c <_svfiprintf_r>:
 8005d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d30:	461d      	mov	r5, r3
 8005d32:	898b      	ldrh	r3, [r1, #12]
 8005d34:	061f      	lsls	r7, r3, #24
 8005d36:	b09d      	sub	sp, #116	; 0x74
 8005d38:	4680      	mov	r8, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4616      	mov	r6, r2
 8005d3e:	d50f      	bpl.n	8005d60 <_svfiprintf_r+0x34>
 8005d40:	690b      	ldr	r3, [r1, #16]
 8005d42:	b96b      	cbnz	r3, 8005d60 <_svfiprintf_r+0x34>
 8005d44:	2140      	movs	r1, #64	; 0x40
 8005d46:	f000 fad9 	bl	80062fc <_malloc_r>
 8005d4a:	6020      	str	r0, [r4, #0]
 8005d4c:	6120      	str	r0, [r4, #16]
 8005d4e:	b928      	cbnz	r0, 8005d5c <_svfiprintf_r+0x30>
 8005d50:	230c      	movs	r3, #12
 8005d52:	f8c8 3000 	str.w	r3, [r8]
 8005d56:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5a:	e0c8      	b.n	8005eee <_svfiprintf_r+0x1c2>
 8005d5c:	2340      	movs	r3, #64	; 0x40
 8005d5e:	6163      	str	r3, [r4, #20]
 8005d60:	2300      	movs	r3, #0
 8005d62:	9309      	str	r3, [sp, #36]	; 0x24
 8005d64:	2320      	movs	r3, #32
 8005d66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d6a:	2330      	movs	r3, #48	; 0x30
 8005d6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d70:	9503      	str	r5, [sp, #12]
 8005d72:	f04f 0b01 	mov.w	fp, #1
 8005d76:	4637      	mov	r7, r6
 8005d78:	463d      	mov	r5, r7
 8005d7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d7e:	b10b      	cbz	r3, 8005d84 <_svfiprintf_r+0x58>
 8005d80:	2b25      	cmp	r3, #37	; 0x25
 8005d82:	d13e      	bne.n	8005e02 <_svfiprintf_r+0xd6>
 8005d84:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d88:	d00b      	beq.n	8005da2 <_svfiprintf_r+0x76>
 8005d8a:	4653      	mov	r3, sl
 8005d8c:	4632      	mov	r2, r6
 8005d8e:	4621      	mov	r1, r4
 8005d90:	4640      	mov	r0, r8
 8005d92:	f7ff ff71 	bl	8005c78 <__ssputs_r>
 8005d96:	3001      	adds	r0, #1
 8005d98:	f000 80a4 	beq.w	8005ee4 <_svfiprintf_r+0x1b8>
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	4453      	add	r3, sl
 8005da0:	9309      	str	r3, [sp, #36]	; 0x24
 8005da2:	783b      	ldrb	r3, [r7, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 809d 	beq.w	8005ee4 <_svfiprintf_r+0x1b8>
 8005daa:	2300      	movs	r3, #0
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db4:	9304      	str	r3, [sp, #16]
 8005db6:	9307      	str	r3, [sp, #28]
 8005db8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dbc:	931a      	str	r3, [sp, #104]	; 0x68
 8005dbe:	462f      	mov	r7, r5
 8005dc0:	2205      	movs	r2, #5
 8005dc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dc6:	4850      	ldr	r0, [pc, #320]	; (8005f08 <_svfiprintf_r+0x1dc>)
 8005dc8:	f7fa fa0a 	bl	80001e0 <memchr>
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	b9d0      	cbnz	r0, 8005e06 <_svfiprintf_r+0xda>
 8005dd0:	06d9      	lsls	r1, r3, #27
 8005dd2:	bf44      	itt	mi
 8005dd4:	2220      	movmi	r2, #32
 8005dd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dda:	071a      	lsls	r2, r3, #28
 8005ddc:	bf44      	itt	mi
 8005dde:	222b      	movmi	r2, #43	; 0x2b
 8005de0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005de4:	782a      	ldrb	r2, [r5, #0]
 8005de6:	2a2a      	cmp	r2, #42	; 0x2a
 8005de8:	d015      	beq.n	8005e16 <_svfiprintf_r+0xea>
 8005dea:	9a07      	ldr	r2, [sp, #28]
 8005dec:	462f      	mov	r7, r5
 8005dee:	2000      	movs	r0, #0
 8005df0:	250a      	movs	r5, #10
 8005df2:	4639      	mov	r1, r7
 8005df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df8:	3b30      	subs	r3, #48	; 0x30
 8005dfa:	2b09      	cmp	r3, #9
 8005dfc:	d94d      	bls.n	8005e9a <_svfiprintf_r+0x16e>
 8005dfe:	b1b8      	cbz	r0, 8005e30 <_svfiprintf_r+0x104>
 8005e00:	e00f      	b.n	8005e22 <_svfiprintf_r+0xf6>
 8005e02:	462f      	mov	r7, r5
 8005e04:	e7b8      	b.n	8005d78 <_svfiprintf_r+0x4c>
 8005e06:	4a40      	ldr	r2, [pc, #256]	; (8005f08 <_svfiprintf_r+0x1dc>)
 8005e08:	1a80      	subs	r0, r0, r2
 8005e0a:	fa0b f000 	lsl.w	r0, fp, r0
 8005e0e:	4318      	orrs	r0, r3
 8005e10:	9004      	str	r0, [sp, #16]
 8005e12:	463d      	mov	r5, r7
 8005e14:	e7d3      	b.n	8005dbe <_svfiprintf_r+0x92>
 8005e16:	9a03      	ldr	r2, [sp, #12]
 8005e18:	1d11      	adds	r1, r2, #4
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	9103      	str	r1, [sp, #12]
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	db01      	blt.n	8005e26 <_svfiprintf_r+0xfa>
 8005e22:	9207      	str	r2, [sp, #28]
 8005e24:	e004      	b.n	8005e30 <_svfiprintf_r+0x104>
 8005e26:	4252      	negs	r2, r2
 8005e28:	f043 0302 	orr.w	r3, r3, #2
 8005e2c:	9207      	str	r2, [sp, #28]
 8005e2e:	9304      	str	r3, [sp, #16]
 8005e30:	783b      	ldrb	r3, [r7, #0]
 8005e32:	2b2e      	cmp	r3, #46	; 0x2e
 8005e34:	d10c      	bne.n	8005e50 <_svfiprintf_r+0x124>
 8005e36:	787b      	ldrb	r3, [r7, #1]
 8005e38:	2b2a      	cmp	r3, #42	; 0x2a
 8005e3a:	d133      	bne.n	8005ea4 <_svfiprintf_r+0x178>
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	9203      	str	r2, [sp, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	bfb8      	it	lt
 8005e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e4c:	3702      	adds	r7, #2
 8005e4e:	9305      	str	r3, [sp, #20]
 8005e50:	4d2e      	ldr	r5, [pc, #184]	; (8005f0c <_svfiprintf_r+0x1e0>)
 8005e52:	7839      	ldrb	r1, [r7, #0]
 8005e54:	2203      	movs	r2, #3
 8005e56:	4628      	mov	r0, r5
 8005e58:	f7fa f9c2 	bl	80001e0 <memchr>
 8005e5c:	b138      	cbz	r0, 8005e6e <_svfiprintf_r+0x142>
 8005e5e:	2340      	movs	r3, #64	; 0x40
 8005e60:	1b40      	subs	r0, r0, r5
 8005e62:	fa03 f000 	lsl.w	r0, r3, r0
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	4303      	orrs	r3, r0
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	9304      	str	r3, [sp, #16]
 8005e6e:	7839      	ldrb	r1, [r7, #0]
 8005e70:	4827      	ldr	r0, [pc, #156]	; (8005f10 <_svfiprintf_r+0x1e4>)
 8005e72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e76:	2206      	movs	r2, #6
 8005e78:	1c7e      	adds	r6, r7, #1
 8005e7a:	f7fa f9b1 	bl	80001e0 <memchr>
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	d038      	beq.n	8005ef4 <_svfiprintf_r+0x1c8>
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <_svfiprintf_r+0x1e8>)
 8005e84:	bb13      	cbnz	r3, 8005ecc <_svfiprintf_r+0x1a0>
 8005e86:	9b03      	ldr	r3, [sp, #12]
 8005e88:	3307      	adds	r3, #7
 8005e8a:	f023 0307 	bic.w	r3, r3, #7
 8005e8e:	3308      	adds	r3, #8
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e94:	444b      	add	r3, r9
 8005e96:	9309      	str	r3, [sp, #36]	; 0x24
 8005e98:	e76d      	b.n	8005d76 <_svfiprintf_r+0x4a>
 8005e9a:	fb05 3202 	mla	r2, r5, r2, r3
 8005e9e:	2001      	movs	r0, #1
 8005ea0:	460f      	mov	r7, r1
 8005ea2:	e7a6      	b.n	8005df2 <_svfiprintf_r+0xc6>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	3701      	adds	r7, #1
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	4619      	mov	r1, r3
 8005eac:	250a      	movs	r5, #10
 8005eae:	4638      	mov	r0, r7
 8005eb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eb4:	3a30      	subs	r2, #48	; 0x30
 8005eb6:	2a09      	cmp	r2, #9
 8005eb8:	d903      	bls.n	8005ec2 <_svfiprintf_r+0x196>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d0c8      	beq.n	8005e50 <_svfiprintf_r+0x124>
 8005ebe:	9105      	str	r1, [sp, #20]
 8005ec0:	e7c6      	b.n	8005e50 <_svfiprintf_r+0x124>
 8005ec2:	fb05 2101 	mla	r1, r5, r1, r2
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4607      	mov	r7, r0
 8005eca:	e7f0      	b.n	8005eae <_svfiprintf_r+0x182>
 8005ecc:	ab03      	add	r3, sp, #12
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	4b11      	ldr	r3, [pc, #68]	; (8005f18 <_svfiprintf_r+0x1ec>)
 8005ed4:	a904      	add	r1, sp, #16
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	f3af 8000 	nop.w
 8005edc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ee0:	4681      	mov	r9, r0
 8005ee2:	d1d6      	bne.n	8005e92 <_svfiprintf_r+0x166>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	065b      	lsls	r3, r3, #25
 8005ee8:	f53f af35 	bmi.w	8005d56 <_svfiprintf_r+0x2a>
 8005eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005eee:	b01d      	add	sp, #116	; 0x74
 8005ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef4:	ab03      	add	r3, sp, #12
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4622      	mov	r2, r4
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <_svfiprintf_r+0x1ec>)
 8005efc:	a904      	add	r1, sp, #16
 8005efe:	4640      	mov	r0, r8
 8005f00:	f000 f882 	bl	8006008 <_printf_i>
 8005f04:	e7ea      	b.n	8005edc <_svfiprintf_r+0x1b0>
 8005f06:	bf00      	nop
 8005f08:	08006508 	.word	0x08006508
 8005f0c:	0800650e 	.word	0x0800650e
 8005f10:	08006512 	.word	0x08006512
 8005f14:	00000000 	.word	0x00000000
 8005f18:	08005c79 	.word	0x08005c79

08005f1c <_printf_common>:
 8005f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f20:	4691      	mov	r9, r2
 8005f22:	461f      	mov	r7, r3
 8005f24:	688a      	ldr	r2, [r1, #8]
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bfb8      	it	lt
 8005f30:	4613      	movlt	r3, r2
 8005f32:	f8c9 3000 	str.w	r3, [r9]
 8005f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	b112      	cbz	r2, 8005f46 <_printf_common+0x2a>
 8005f40:	3301      	adds	r3, #1
 8005f42:	f8c9 3000 	str.w	r3, [r9]
 8005f46:	6823      	ldr	r3, [r4, #0]
 8005f48:	0699      	lsls	r1, r3, #26
 8005f4a:	bf42      	ittt	mi
 8005f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f50:	3302      	addmi	r3, #2
 8005f52:	f8c9 3000 	strmi.w	r3, [r9]
 8005f56:	6825      	ldr	r5, [r4, #0]
 8005f58:	f015 0506 	ands.w	r5, r5, #6
 8005f5c:	d107      	bne.n	8005f6e <_printf_common+0x52>
 8005f5e:	f104 0a19 	add.w	sl, r4, #25
 8005f62:	68e3      	ldr	r3, [r4, #12]
 8005f64:	f8d9 2000 	ldr.w	r2, [r9]
 8005f68:	1a9b      	subs	r3, r3, r2
 8005f6a:	42ab      	cmp	r3, r5
 8005f6c:	dc28      	bgt.n	8005fc0 <_printf_common+0xa4>
 8005f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	3300      	adds	r3, #0
 8005f76:	bf18      	it	ne
 8005f78:	2301      	movne	r3, #1
 8005f7a:	0692      	lsls	r2, r2, #26
 8005f7c:	d42d      	bmi.n	8005fda <_printf_common+0xbe>
 8005f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f82:	4639      	mov	r1, r7
 8005f84:	4630      	mov	r0, r6
 8005f86:	47c0      	blx	r8
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d020      	beq.n	8005fce <_printf_common+0xb2>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	68e5      	ldr	r5, [r4, #12]
 8005f90:	f8d9 2000 	ldr.w	r2, [r9]
 8005f94:	f003 0306 	and.w	r3, r3, #6
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	bf08      	it	eq
 8005f9c:	1aad      	subeq	r5, r5, r2
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	6922      	ldr	r2, [r4, #16]
 8005fa2:	bf0c      	ite	eq
 8005fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fa8:	2500      	movne	r5, #0
 8005faa:	4293      	cmp	r3, r2
 8005fac:	bfc4      	itt	gt
 8005fae:	1a9b      	subgt	r3, r3, r2
 8005fb0:	18ed      	addgt	r5, r5, r3
 8005fb2:	f04f 0900 	mov.w	r9, #0
 8005fb6:	341a      	adds	r4, #26
 8005fb8:	454d      	cmp	r5, r9
 8005fba:	d11a      	bne.n	8005ff2 <_printf_common+0xd6>
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e008      	b.n	8005fd2 <_printf_common+0xb6>
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	4652      	mov	r2, sl
 8005fc4:	4639      	mov	r1, r7
 8005fc6:	4630      	mov	r0, r6
 8005fc8:	47c0      	blx	r8
 8005fca:	3001      	adds	r0, #1
 8005fcc:	d103      	bne.n	8005fd6 <_printf_common+0xba>
 8005fce:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	3501      	adds	r5, #1
 8005fd8:	e7c3      	b.n	8005f62 <_printf_common+0x46>
 8005fda:	18e1      	adds	r1, r4, r3
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	2030      	movs	r0, #48	; 0x30
 8005fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fe4:	4422      	add	r2, r4
 8005fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fee:	3302      	adds	r3, #2
 8005ff0:	e7c5      	b.n	8005f7e <_printf_common+0x62>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4639      	mov	r1, r7
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	47c0      	blx	r8
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	d0e6      	beq.n	8005fce <_printf_common+0xb2>
 8006000:	f109 0901 	add.w	r9, r9, #1
 8006004:	e7d8      	b.n	8005fb8 <_printf_common+0x9c>
	...

08006008 <_printf_i>:
 8006008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800600c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006010:	460c      	mov	r4, r1
 8006012:	7e09      	ldrb	r1, [r1, #24]
 8006014:	b085      	sub	sp, #20
 8006016:	296e      	cmp	r1, #110	; 0x6e
 8006018:	4617      	mov	r7, r2
 800601a:	4606      	mov	r6, r0
 800601c:	4698      	mov	r8, r3
 800601e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006020:	f000 80b3 	beq.w	800618a <_printf_i+0x182>
 8006024:	d822      	bhi.n	800606c <_printf_i+0x64>
 8006026:	2963      	cmp	r1, #99	; 0x63
 8006028:	d036      	beq.n	8006098 <_printf_i+0x90>
 800602a:	d80a      	bhi.n	8006042 <_printf_i+0x3a>
 800602c:	2900      	cmp	r1, #0
 800602e:	f000 80b9 	beq.w	80061a4 <_printf_i+0x19c>
 8006032:	2958      	cmp	r1, #88	; 0x58
 8006034:	f000 8083 	beq.w	800613e <_printf_i+0x136>
 8006038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800603c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006040:	e032      	b.n	80060a8 <_printf_i+0xa0>
 8006042:	2964      	cmp	r1, #100	; 0x64
 8006044:	d001      	beq.n	800604a <_printf_i+0x42>
 8006046:	2969      	cmp	r1, #105	; 0x69
 8006048:	d1f6      	bne.n	8006038 <_printf_i+0x30>
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	6813      	ldr	r3, [r2, #0]
 800604e:	0605      	lsls	r5, r0, #24
 8006050:	f103 0104 	add.w	r1, r3, #4
 8006054:	d52a      	bpl.n	80060ac <_printf_i+0xa4>
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6011      	str	r1, [r2, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	da03      	bge.n	8006066 <_printf_i+0x5e>
 800605e:	222d      	movs	r2, #45	; 0x2d
 8006060:	425b      	negs	r3, r3
 8006062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006066:	486f      	ldr	r0, [pc, #444]	; (8006224 <_printf_i+0x21c>)
 8006068:	220a      	movs	r2, #10
 800606a:	e039      	b.n	80060e0 <_printf_i+0xd8>
 800606c:	2973      	cmp	r1, #115	; 0x73
 800606e:	f000 809d 	beq.w	80061ac <_printf_i+0x1a4>
 8006072:	d808      	bhi.n	8006086 <_printf_i+0x7e>
 8006074:	296f      	cmp	r1, #111	; 0x6f
 8006076:	d020      	beq.n	80060ba <_printf_i+0xb2>
 8006078:	2970      	cmp	r1, #112	; 0x70
 800607a:	d1dd      	bne.n	8006038 <_printf_i+0x30>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	f043 0320 	orr.w	r3, r3, #32
 8006082:	6023      	str	r3, [r4, #0]
 8006084:	e003      	b.n	800608e <_printf_i+0x86>
 8006086:	2975      	cmp	r1, #117	; 0x75
 8006088:	d017      	beq.n	80060ba <_printf_i+0xb2>
 800608a:	2978      	cmp	r1, #120	; 0x78
 800608c:	d1d4      	bne.n	8006038 <_printf_i+0x30>
 800608e:	2378      	movs	r3, #120	; 0x78
 8006090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006094:	4864      	ldr	r0, [pc, #400]	; (8006228 <_printf_i+0x220>)
 8006096:	e055      	b.n	8006144 <_printf_i+0x13c>
 8006098:	6813      	ldr	r3, [r2, #0]
 800609a:	1d19      	adds	r1, r3, #4
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6011      	str	r1, [r2, #0]
 80060a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80060a8:	2301      	movs	r3, #1
 80060aa:	e08c      	b.n	80061c6 <_printf_i+0x1be>
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6011      	str	r1, [r2, #0]
 80060b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060b4:	bf18      	it	ne
 80060b6:	b21b      	sxthne	r3, r3
 80060b8:	e7cf      	b.n	800605a <_printf_i+0x52>
 80060ba:	6813      	ldr	r3, [r2, #0]
 80060bc:	6825      	ldr	r5, [r4, #0]
 80060be:	1d18      	adds	r0, r3, #4
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	0628      	lsls	r0, r5, #24
 80060c4:	d501      	bpl.n	80060ca <_printf_i+0xc2>
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	e002      	b.n	80060d0 <_printf_i+0xc8>
 80060ca:	0668      	lsls	r0, r5, #25
 80060cc:	d5fb      	bpl.n	80060c6 <_printf_i+0xbe>
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	4854      	ldr	r0, [pc, #336]	; (8006224 <_printf_i+0x21c>)
 80060d2:	296f      	cmp	r1, #111	; 0x6f
 80060d4:	bf14      	ite	ne
 80060d6:	220a      	movne	r2, #10
 80060d8:	2208      	moveq	r2, #8
 80060da:	2100      	movs	r1, #0
 80060dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060e0:	6865      	ldr	r5, [r4, #4]
 80060e2:	60a5      	str	r5, [r4, #8]
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	f2c0 8095 	blt.w	8006214 <_printf_i+0x20c>
 80060ea:	6821      	ldr	r1, [r4, #0]
 80060ec:	f021 0104 	bic.w	r1, r1, #4
 80060f0:	6021      	str	r1, [r4, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d13d      	bne.n	8006172 <_printf_i+0x16a>
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	f040 808e 	bne.w	8006218 <_printf_i+0x210>
 80060fc:	4665      	mov	r5, ip
 80060fe:	2a08      	cmp	r2, #8
 8006100:	d10b      	bne.n	800611a <_printf_i+0x112>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07db      	lsls	r3, r3, #31
 8006106:	d508      	bpl.n	800611a <_printf_i+0x112>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	6862      	ldr	r2, [r4, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	bfde      	ittt	le
 8006110:	2330      	movle	r3, #48	; 0x30
 8006112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006116:	f105 35ff 	addle.w	r5, r5, #4294967295
 800611a:	ebac 0305 	sub.w	r3, ip, r5
 800611e:	6123      	str	r3, [r4, #16]
 8006120:	f8cd 8000 	str.w	r8, [sp]
 8006124:	463b      	mov	r3, r7
 8006126:	aa03      	add	r2, sp, #12
 8006128:	4621      	mov	r1, r4
 800612a:	4630      	mov	r0, r6
 800612c:	f7ff fef6 	bl	8005f1c <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	d14d      	bne.n	80061d0 <_printf_i+0x1c8>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	b005      	add	sp, #20
 800613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800613e:	4839      	ldr	r0, [pc, #228]	; (8006224 <_printf_i+0x21c>)
 8006140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006144:	6813      	ldr	r3, [r2, #0]
 8006146:	6821      	ldr	r1, [r4, #0]
 8006148:	1d1d      	adds	r5, r3, #4
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6015      	str	r5, [r2, #0]
 800614e:	060a      	lsls	r2, r1, #24
 8006150:	d50b      	bpl.n	800616a <_printf_i+0x162>
 8006152:	07ca      	lsls	r2, r1, #31
 8006154:	bf44      	itt	mi
 8006156:	f041 0120 	orrmi.w	r1, r1, #32
 800615a:	6021      	strmi	r1, [r4, #0]
 800615c:	b91b      	cbnz	r3, 8006166 <_printf_i+0x15e>
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	f022 0220 	bic.w	r2, r2, #32
 8006164:	6022      	str	r2, [r4, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	e7b7      	b.n	80060da <_printf_i+0xd2>
 800616a:	064d      	lsls	r5, r1, #25
 800616c:	bf48      	it	mi
 800616e:	b29b      	uxthmi	r3, r3
 8006170:	e7ef      	b.n	8006152 <_printf_i+0x14a>
 8006172:	4665      	mov	r5, ip
 8006174:	fbb3 f1f2 	udiv	r1, r3, r2
 8006178:	fb02 3311 	mls	r3, r2, r1, r3
 800617c:	5cc3      	ldrb	r3, [r0, r3]
 800617e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006182:	460b      	mov	r3, r1
 8006184:	2900      	cmp	r1, #0
 8006186:	d1f5      	bne.n	8006174 <_printf_i+0x16c>
 8006188:	e7b9      	b.n	80060fe <_printf_i+0xf6>
 800618a:	6813      	ldr	r3, [r2, #0]
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	6961      	ldr	r1, [r4, #20]
 8006190:	1d18      	adds	r0, r3, #4
 8006192:	6010      	str	r0, [r2, #0]
 8006194:	0628      	lsls	r0, r5, #24
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	d501      	bpl.n	800619e <_printf_i+0x196>
 800619a:	6019      	str	r1, [r3, #0]
 800619c:	e002      	b.n	80061a4 <_printf_i+0x19c>
 800619e:	066a      	lsls	r2, r5, #25
 80061a0:	d5fb      	bpl.n	800619a <_printf_i+0x192>
 80061a2:	8019      	strh	r1, [r3, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	4665      	mov	r5, ip
 80061aa:	e7b9      	b.n	8006120 <_printf_i+0x118>
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	1d19      	adds	r1, r3, #4
 80061b0:	6011      	str	r1, [r2, #0]
 80061b2:	681d      	ldr	r5, [r3, #0]
 80061b4:	6862      	ldr	r2, [r4, #4]
 80061b6:	2100      	movs	r1, #0
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7fa f811 	bl	80001e0 <memchr>
 80061be:	b108      	cbz	r0, 80061c4 <_printf_i+0x1bc>
 80061c0:	1b40      	subs	r0, r0, r5
 80061c2:	6060      	str	r0, [r4, #4]
 80061c4:	6863      	ldr	r3, [r4, #4]
 80061c6:	6123      	str	r3, [r4, #16]
 80061c8:	2300      	movs	r3, #0
 80061ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061ce:	e7a7      	b.n	8006120 <_printf_i+0x118>
 80061d0:	6923      	ldr	r3, [r4, #16]
 80061d2:	462a      	mov	r2, r5
 80061d4:	4639      	mov	r1, r7
 80061d6:	4630      	mov	r0, r6
 80061d8:	47c0      	blx	r8
 80061da:	3001      	adds	r0, #1
 80061dc:	d0aa      	beq.n	8006134 <_printf_i+0x12c>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	079b      	lsls	r3, r3, #30
 80061e2:	d413      	bmi.n	800620c <_printf_i+0x204>
 80061e4:	68e0      	ldr	r0, [r4, #12]
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	4298      	cmp	r0, r3
 80061ea:	bfb8      	it	lt
 80061ec:	4618      	movlt	r0, r3
 80061ee:	e7a3      	b.n	8006138 <_printf_i+0x130>
 80061f0:	2301      	movs	r3, #1
 80061f2:	464a      	mov	r2, r9
 80061f4:	4639      	mov	r1, r7
 80061f6:	4630      	mov	r0, r6
 80061f8:	47c0      	blx	r8
 80061fa:	3001      	adds	r0, #1
 80061fc:	d09a      	beq.n	8006134 <_printf_i+0x12c>
 80061fe:	3501      	adds	r5, #1
 8006200:	68e3      	ldr	r3, [r4, #12]
 8006202:	9a03      	ldr	r2, [sp, #12]
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	42ab      	cmp	r3, r5
 8006208:	dcf2      	bgt.n	80061f0 <_printf_i+0x1e8>
 800620a:	e7eb      	b.n	80061e4 <_printf_i+0x1dc>
 800620c:	2500      	movs	r5, #0
 800620e:	f104 0919 	add.w	r9, r4, #25
 8006212:	e7f5      	b.n	8006200 <_printf_i+0x1f8>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1ac      	bne.n	8006172 <_printf_i+0x16a>
 8006218:	7803      	ldrb	r3, [r0, #0]
 800621a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800621e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006222:	e76c      	b.n	80060fe <_printf_i+0xf6>
 8006224:	08006519 	.word	0x08006519
 8006228:	0800652a 	.word	0x0800652a

0800622c <memmove>:
 800622c:	4288      	cmp	r0, r1
 800622e:	b510      	push	{r4, lr}
 8006230:	eb01 0302 	add.w	r3, r1, r2
 8006234:	d807      	bhi.n	8006246 <memmove+0x1a>
 8006236:	1e42      	subs	r2, r0, #1
 8006238:	4299      	cmp	r1, r3
 800623a:	d00a      	beq.n	8006252 <memmove+0x26>
 800623c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006240:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006244:	e7f8      	b.n	8006238 <memmove+0xc>
 8006246:	4283      	cmp	r3, r0
 8006248:	d9f5      	bls.n	8006236 <memmove+0xa>
 800624a:	1881      	adds	r1, r0, r2
 800624c:	1ad2      	subs	r2, r2, r3
 800624e:	42d3      	cmn	r3, r2
 8006250:	d100      	bne.n	8006254 <memmove+0x28>
 8006252:	bd10      	pop	{r4, pc}
 8006254:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006258:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800625c:	e7f7      	b.n	800624e <memmove+0x22>
	...

08006260 <_free_r>:
 8006260:	b538      	push	{r3, r4, r5, lr}
 8006262:	4605      	mov	r5, r0
 8006264:	2900      	cmp	r1, #0
 8006266:	d045      	beq.n	80062f4 <_free_r+0x94>
 8006268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800626c:	1f0c      	subs	r4, r1, #4
 800626e:	2b00      	cmp	r3, #0
 8006270:	bfb8      	it	lt
 8006272:	18e4      	addlt	r4, r4, r3
 8006274:	f000 f8d2 	bl	800641c <__malloc_lock>
 8006278:	4a1f      	ldr	r2, [pc, #124]	; (80062f8 <_free_r+0x98>)
 800627a:	6813      	ldr	r3, [r2, #0]
 800627c:	4610      	mov	r0, r2
 800627e:	b933      	cbnz	r3, 800628e <_free_r+0x2e>
 8006280:	6063      	str	r3, [r4, #4]
 8006282:	6014      	str	r4, [r2, #0]
 8006284:	4628      	mov	r0, r5
 8006286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628a:	f000 b8c8 	b.w	800641e <__malloc_unlock>
 800628e:	42a3      	cmp	r3, r4
 8006290:	d90c      	bls.n	80062ac <_free_r+0x4c>
 8006292:	6821      	ldr	r1, [r4, #0]
 8006294:	1862      	adds	r2, r4, r1
 8006296:	4293      	cmp	r3, r2
 8006298:	bf04      	itt	eq
 800629a:	681a      	ldreq	r2, [r3, #0]
 800629c:	685b      	ldreq	r3, [r3, #4]
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	bf04      	itt	eq
 80062a2:	1852      	addeq	r2, r2, r1
 80062a4:	6022      	streq	r2, [r4, #0]
 80062a6:	6004      	str	r4, [r0, #0]
 80062a8:	e7ec      	b.n	8006284 <_free_r+0x24>
 80062aa:	4613      	mov	r3, r2
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	b10a      	cbz	r2, 80062b4 <_free_r+0x54>
 80062b0:	42a2      	cmp	r2, r4
 80062b2:	d9fa      	bls.n	80062aa <_free_r+0x4a>
 80062b4:	6819      	ldr	r1, [r3, #0]
 80062b6:	1858      	adds	r0, r3, r1
 80062b8:	42a0      	cmp	r0, r4
 80062ba:	d10b      	bne.n	80062d4 <_free_r+0x74>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	4401      	add	r1, r0
 80062c0:	1858      	adds	r0, r3, r1
 80062c2:	4282      	cmp	r2, r0
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	d1dd      	bne.n	8006284 <_free_r+0x24>
 80062c8:	6810      	ldr	r0, [r2, #0]
 80062ca:	6852      	ldr	r2, [r2, #4]
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	4401      	add	r1, r0
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	e7d7      	b.n	8006284 <_free_r+0x24>
 80062d4:	d902      	bls.n	80062dc <_free_r+0x7c>
 80062d6:	230c      	movs	r3, #12
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	e7d3      	b.n	8006284 <_free_r+0x24>
 80062dc:	6820      	ldr	r0, [r4, #0]
 80062de:	1821      	adds	r1, r4, r0
 80062e0:	428a      	cmp	r2, r1
 80062e2:	bf04      	itt	eq
 80062e4:	6811      	ldreq	r1, [r2, #0]
 80062e6:	6852      	ldreq	r2, [r2, #4]
 80062e8:	6062      	str	r2, [r4, #4]
 80062ea:	bf04      	itt	eq
 80062ec:	1809      	addeq	r1, r1, r0
 80062ee:	6021      	streq	r1, [r4, #0]
 80062f0:	605c      	str	r4, [r3, #4]
 80062f2:	e7c7      	b.n	8006284 <_free_r+0x24>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	200019a0 	.word	0x200019a0

080062fc <_malloc_r>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	1ccd      	adds	r5, r1, #3
 8006300:	f025 0503 	bic.w	r5, r5, #3
 8006304:	3508      	adds	r5, #8
 8006306:	2d0c      	cmp	r5, #12
 8006308:	bf38      	it	cc
 800630a:	250c      	movcc	r5, #12
 800630c:	2d00      	cmp	r5, #0
 800630e:	4606      	mov	r6, r0
 8006310:	db01      	blt.n	8006316 <_malloc_r+0x1a>
 8006312:	42a9      	cmp	r1, r5
 8006314:	d903      	bls.n	800631e <_malloc_r+0x22>
 8006316:	230c      	movs	r3, #12
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	2000      	movs	r0, #0
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	f000 f87d 	bl	800641c <__malloc_lock>
 8006322:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <_malloc_r+0xac>)
 8006324:	6814      	ldr	r4, [r2, #0]
 8006326:	4621      	mov	r1, r4
 8006328:	b991      	cbnz	r1, 8006350 <_malloc_r+0x54>
 800632a:	4c20      	ldr	r4, [pc, #128]	; (80063ac <_malloc_r+0xb0>)
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	b91b      	cbnz	r3, 8006338 <_malloc_r+0x3c>
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f863 	bl	80063fc <_sbrk_r>
 8006336:	6020      	str	r0, [r4, #0]
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f85e 	bl	80063fc <_sbrk_r>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d124      	bne.n	800638e <_malloc_r+0x92>
 8006344:	230c      	movs	r3, #12
 8006346:	6033      	str	r3, [r6, #0]
 8006348:	4630      	mov	r0, r6
 800634a:	f000 f868 	bl	800641e <__malloc_unlock>
 800634e:	e7e4      	b.n	800631a <_malloc_r+0x1e>
 8006350:	680b      	ldr	r3, [r1, #0]
 8006352:	1b5b      	subs	r3, r3, r5
 8006354:	d418      	bmi.n	8006388 <_malloc_r+0x8c>
 8006356:	2b0b      	cmp	r3, #11
 8006358:	d90f      	bls.n	800637a <_malloc_r+0x7e>
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	50cd      	str	r5, [r1, r3]
 800635e:	18cc      	adds	r4, r1, r3
 8006360:	4630      	mov	r0, r6
 8006362:	f000 f85c 	bl	800641e <__malloc_unlock>
 8006366:	f104 000b 	add.w	r0, r4, #11
 800636a:	1d23      	adds	r3, r4, #4
 800636c:	f020 0007 	bic.w	r0, r0, #7
 8006370:	1ac3      	subs	r3, r0, r3
 8006372:	d0d3      	beq.n	800631c <_malloc_r+0x20>
 8006374:	425a      	negs	r2, r3
 8006376:	50e2      	str	r2, [r4, r3]
 8006378:	e7d0      	b.n	800631c <_malloc_r+0x20>
 800637a:	428c      	cmp	r4, r1
 800637c:	684b      	ldr	r3, [r1, #4]
 800637e:	bf16      	itet	ne
 8006380:	6063      	strne	r3, [r4, #4]
 8006382:	6013      	streq	r3, [r2, #0]
 8006384:	460c      	movne	r4, r1
 8006386:	e7eb      	b.n	8006360 <_malloc_r+0x64>
 8006388:	460c      	mov	r4, r1
 800638a:	6849      	ldr	r1, [r1, #4]
 800638c:	e7cc      	b.n	8006328 <_malloc_r+0x2c>
 800638e:	1cc4      	adds	r4, r0, #3
 8006390:	f024 0403 	bic.w	r4, r4, #3
 8006394:	42a0      	cmp	r0, r4
 8006396:	d005      	beq.n	80063a4 <_malloc_r+0xa8>
 8006398:	1a21      	subs	r1, r4, r0
 800639a:	4630      	mov	r0, r6
 800639c:	f000 f82e 	bl	80063fc <_sbrk_r>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d0cf      	beq.n	8006344 <_malloc_r+0x48>
 80063a4:	6025      	str	r5, [r4, #0]
 80063a6:	e7db      	b.n	8006360 <_malloc_r+0x64>
 80063a8:	200019a0 	.word	0x200019a0
 80063ac:	200019a4 	.word	0x200019a4

080063b0 <_realloc_r>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	4607      	mov	r7, r0
 80063b4:	4614      	mov	r4, r2
 80063b6:	460e      	mov	r6, r1
 80063b8:	b921      	cbnz	r1, 80063c4 <_realloc_r+0x14>
 80063ba:	4611      	mov	r1, r2
 80063bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063c0:	f7ff bf9c 	b.w	80062fc <_malloc_r>
 80063c4:	b922      	cbnz	r2, 80063d0 <_realloc_r+0x20>
 80063c6:	f7ff ff4b 	bl	8006260 <_free_r>
 80063ca:	4625      	mov	r5, r4
 80063cc:	4628      	mov	r0, r5
 80063ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d0:	f000 f826 	bl	8006420 <_malloc_usable_size_r>
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d20f      	bcs.n	80063f8 <_realloc_r+0x48>
 80063d8:	4621      	mov	r1, r4
 80063da:	4638      	mov	r0, r7
 80063dc:	f7ff ff8e 	bl	80062fc <_malloc_r>
 80063e0:	4605      	mov	r5, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d0f2      	beq.n	80063cc <_realloc_r+0x1c>
 80063e6:	4631      	mov	r1, r6
 80063e8:	4622      	mov	r2, r4
 80063ea:	f7ff fc11 	bl	8005c10 <memcpy>
 80063ee:	4631      	mov	r1, r6
 80063f0:	4638      	mov	r0, r7
 80063f2:	f7ff ff35 	bl	8006260 <_free_r>
 80063f6:	e7e9      	b.n	80063cc <_realloc_r+0x1c>
 80063f8:	4635      	mov	r5, r6
 80063fa:	e7e7      	b.n	80063cc <_realloc_r+0x1c>

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4c06      	ldr	r4, [pc, #24]	; (8006418 <_sbrk_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4605      	mov	r5, r0
 8006404:	4608      	mov	r0, r1
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f7fa fa0a 	bl	8000820 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	20001ac4 	.word	0x20001ac4

0800641c <__malloc_lock>:
 800641c:	4770      	bx	lr

0800641e <__malloc_unlock>:
 800641e:	4770      	bx	lr

08006420 <_malloc_usable_size_r>:
 8006420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006424:	1f18      	subs	r0, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfbc      	itt	lt
 800642a:	580b      	ldrlt	r3, [r1, r0]
 800642c:	18c0      	addlt	r0, r0, r3
 800642e:	4770      	bx	lr

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
